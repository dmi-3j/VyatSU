2025-05-27 11:36:26.437 +03:00 [DBG] Hosting starting
2025-05-27 11:36:26.528 +03:00 [DBG] Hosting started
2025-05-27 11:36:26.531 +03:00 [DBG] Loaded hosting startup assembly OrdersServiceIntegationTests
2025-05-27 11:36:26.645 +03:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-05-27 11:36:27.176 +03:00 [DBG] Entity Framework Core 9.0.5 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.3' with options: None
2025-05-27 11:36:27.189 +03:00 [DBG] Creating DbConnection.
2025-05-27 11:36:27.201 +03:00 [DBG] Created DbConnection. (12ms).
2025-05-27 11:36:27.207 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:36:27.216 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:36:27.220 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:36:27.224 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (1ms).
2025-05-27 11:36:27.228 +03:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-05-27 11:36:27.228 +03:00 [DBG] Creating DbConnection.
2025-05-27 11:36:27.229 +03:00 [DBG] Created DbConnection. (0ms).
2025-05-27 11:36:27.234 +03:00 [DBG] Created DbCommand for 'ExecuteScalar' (3ms).
2025-05-27 11:36:27.235 +03:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (7ms).
2025-05-27 11:36:27.235 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:36:27.237 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:36:27.243 +03:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-05-27 11:36:27.265 +03:00 [INF] Executed DbCommand (18ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-05-27 11:36:27.267 +03:00 [DBG] Closing connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:36:27.269 +03:00 [DBG] Closed connection to database 'main' on server 'servicecenter.db' (2ms).
2025-05-27 11:36:27.270 +03:00 [DBG] 'AppDbContext' disposed.
2025-05-27 11:36:27.271 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:36:27.271 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:36:27.341 +03:00 [INF] Request starting HTTP/2 POST https://10.8.1.1:9080/OrdersService/CreateOrder - application/grpc null
2025-05-27 11:36:27.386 +03:00 [DBG] 3 candidate(s) found for the request path '/OrdersService/CreateOrder'
2025-05-27 11:36:27.390 +03:00 [DBG] Endpoint 'gRPC - /OrdersService/CreateOrder' with route pattern '/OrdersService/CreateOrder' is valid for the request path '/OrdersService/CreateOrder'
2025-05-27 11:36:27.390 +03:00 [DBG] Endpoint 'gRPC - Unimplemented method for OrdersService' with route pattern 'OrdersService/{unimplementedMethod:grpcunimplemented}' is valid for the request path '/OrdersService/CreateOrder'
2025-05-27 11:36:27.390 +03:00 [DBG] Endpoint 'gRPC - Unimplemented service' with route pattern '{unimplementedService}/{unimplementedMethod:grpcunimplemented}' is valid for the request path '/OrdersService/CreateOrder'
2025-05-27 11:36:27.392 +03:00 [DBG] Request matched endpoint 'gRPC - /OrdersService/CreateOrder'
2025-05-27 11:36:27.396 +03:00 [INF] Executing endpoint 'gRPC - /OrdersService/CreateOrder'
2025-05-27 11:36:27.403 +03:00 [DBG] Reading message.
2025-05-27 11:36:27.429 +03:00 [DBG] Entity Framework Core 9.0.5 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.3' with options: None
2025-05-27 11:36:27.432 +03:00 [DBG] Creating DbConnection.
2025-05-27 11:36:27.432 +03:00 [DBG] Created DbConnection. (0ms).
2025-05-27 11:36:27.432 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:36:27.433 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:36:27.433 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:36:27.433 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:36:27.433 +03:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-05-27 11:36:27.433 +03:00 [DBG] Creating DbConnection.
2025-05-27 11:36:27.433 +03:00 [DBG] Created DbConnection. (0ms).
2025-05-27 11:36:27.433 +03:00 [DBG] Created DbCommand for 'ExecuteScalar' (0ms).
2025-05-27 11:36:27.433 +03:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (0ms).
2025-05-27 11:36:27.433 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:36:27.433 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:36:27.433 +03:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-05-27 11:36:27.433 +03:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-05-27 11:36:27.434 +03:00 [DBG] Closing connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:36:27.434 +03:00 [DBG] Closed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:36:27.440 +03:00 [INF] Creating new order [ID: d19afb11-3e38-42ca-ba81-6515c6c45f39] for customer: Test Client
2025-05-27 11:36:27.528 +03:00 [DBG] Context 'AppDbContext' started tracking 'Order' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:36:27.539 +03:00 [DBG] 'AppDbContext' generated a temporary value for the property 'OrderPart.Id'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:36:27.556 +03:00 [DBG] The navigation 'OrderPart.Order' was detected as changed. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:36:27.565 +03:00 [DBG] Context 'AppDbContext' started tracking 'OrderPart' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:36:27.568 +03:00 [DBG] SaveChanges starting for 'AppDbContext'.
2025-05-27 11:36:27.572 +03:00 [DBG] DetectChanges starting for 'AppDbContext'.
2025-05-27 11:36:27.583 +03:00 [DBG] DetectChanges completed for 'AppDbContext'.
2025-05-27 11:36:27.700 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:36:27.701 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:36:27.704 +03:00 [DBG] Beginning transaction with isolation level 'Unspecified'.
2025-05-27 11:36:27.711 +03:00 [DBG] Began transaction with isolation level 'Serializable'.
2025-05-27 11:36:27.716 +03:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-05-27 11:36:27.716 +03:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-05-27 11:36:27.717 +03:00 [DBG] Initialized DbCommand for 'ExecuteReader' (1ms).
2025-05-27 11:36:27.720 +03:00 [DBG] Executing DbCommand [Parameters=[@p0='?' (Size = 36), @p1='?' (Size = 11), @p2='?', @p3='?' (Size = 7), @p4='?' (Size = 8), @p5='?' (Size = 10), @p6='?' (Size = 11), @p7='?' (DbType = Double), @p8='?' (Size = 13), @p9='?', @p10='?' (Size = 6), @p11='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Orders" ("OrderId", "CustomerName", "Description", "DeviceModel", "DeviceType", "OrderDate", "PhoneNumber", "Price", "RepairType", "ResponsibleMaster", "Status", "WarehouseRequestStatus")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11);
2025-05-27 11:36:27.729 +03:00 [INF] Executed DbCommand (12ms) [Parameters=[@p0='?' (Size = 36), @p1='?' (Size = 11), @p2='?', @p3='?' (Size = 7), @p4='?' (Size = 8), @p5='?' (Size = 10), @p6='?' (Size = 11), @p7='?' (DbType = Double), @p8='?' (Size = 13), @p9='?', @p10='?' (Size = 6), @p11='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Orders" ("OrderId", "CustomerName", "Description", "DeviceModel", "DeviceType", "OrderDate", "PhoneNumber", "Price", "RepairType", "ResponsibleMaster", "Status", "WarehouseRequestStatus")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11);
2025-05-27 11:36:27.734 +03:00 [DBG] Closing data reader to 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:36:27.736 +03:00 [DBG] A data reader for 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db' is being disposed after spending 5ms reading results.
2025-05-27 11:36:27.737 +03:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-05-27 11:36:27.737 +03:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-05-27 11:36:27.737 +03:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-05-27 11:36:27.737 +03:00 [DBG] Executing DbCommand [Parameters=[@p0='?', @p1='?' (Size = 5), @p2='?' (Size = 36), @p3='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "OrderParts" ("Model", "Name", "OrderId", "Quantity")
VALUES (@p0, @p1, @p2, @p3)
RETURNING "Id";
2025-05-27 11:36:27.738 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[@p0='?', @p1='?' (Size = 5), @p2='?' (Size = 36), @p3='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "OrderParts" ("Model", "Name", "OrderId", "Quantity")
VALUES (@p0, @p1, @p2, @p3)
RETURNING "Id";
2025-05-27 11:36:27.746 +03:00 [DBG] The foreign key property 'OrderPart.Id' was detected as changed. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see property values.
2025-05-27 11:36:27.749 +03:00 [DBG] Closing data reader to 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:36:27.749 +03:00 [DBG] A data reader for 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db' is being disposed after spending 10ms reading results.
2025-05-27 11:36:27.751 +03:00 [DBG] Committing transaction.
2025-05-27 11:36:27.760 +03:00 [DBG] Committed transaction.
2025-05-27 11:36:27.762 +03:00 [DBG] Closing connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:36:27.763 +03:00 [DBG] Closed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:36:27.764 +03:00 [DBG] Disposing transaction.
2025-05-27 11:36:27.770 +03:00 [DBG] An entity of type 'Order' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:36:27.772 +03:00 [DBG] An entity of type 'OrderPart' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:36:27.772 +03:00 [DBG] SaveChanges completed for 'AppDbContext' with 2 entities written to the database.
2025-05-27 11:36:27.773 +03:00 [INF] Order saved successfully. ID: d19afb11-3e38-42ca-ba81-6515c6c45f39
2025-05-27 11:36:27.789 +03:00 [ERR] Failed to send order to queue
System.ArgumentNullException: Value cannot be null. (Parameter 'value')
   at RabbitMQ.Client.ConnectionFactory.set_UserName(String value)
   at ServiceCenter.Services.OrdersServiceImpl.SendOrderToQueue(Order order) in D:\Desktop\ServiceCenter test\ServiceCenter\Services\OrdersServiceImpl.cs:line 303
2025-05-27 11:36:27.796 +03:00 [INF] Order created successfully. ID: d19afb11-3e38-42ca-ba81-6515c6c45f39
2025-05-27 11:36:27.802 +03:00 [DBG] Sending message.
2025-05-27 11:36:27.809 +03:00 [INF] Executed endpoint 'gRPC - /OrdersService/CreateOrder'
2025-05-27 11:36:27.814 +03:00 [DBG] 'AppDbContext' disposed.
2025-05-27 11:36:27.817 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:36:27.817 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:36:27.818 +03:00 [INF] Request finished HTTP/2 POST https://10.8.1.1:9080/OrdersService/CreateOrder - 200 null application/grpc 478.759ms
2025-05-27 11:36:27.889 +03:00 [DBG] Entity Framework Core 9.0.5 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.3' with options: None
2025-05-27 11:36:27.947 +03:00 [DBG] Compiling query expression: 
'DbSet<Order>()
    .Include(o => o.Parts)
    .FirstOrDefault(o => o.OrderId == __response_OrderId_0)'
2025-05-27 11:36:27.990 +03:00 [DBG] Including navigation: 'Order.Parts'.
2025-05-27 11:36:28.211 +03:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<Order>(
    asyncEnumerable: SingleQueryingEnumerable.Create<Order>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: Order.OrderId (string) Required PK AfterSave:Throw, 0], [Property: Order.CustomerName (string) Required, 1], [Property: Order.Description (string) Required, 2], [Property: Order.DeviceModel (string) Required, 3], [Property: Order.DeviceType (string) Required, 4], [Property: Order.OrderDate (string) Required, 5], [Property: Order.PhoneNumber (string) Required, 6], [Property: Order.Price (double) Required, 7], [Property: Order.RepairType (string) Required, 8], [Property: Order.ResponsibleMaster (string) Required, 9], [Property: Order.Status (string) Required, 10], [Property: Order.WarehouseRequestStatus (string) Required, 11] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: OrderPart.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 12], [Property: OrderPart.Model (string) Required, 13], [Property: OrderPart.Name (string) Required, 14], [Property: OrderPart.OrderId (string) Required FK Index, 15], [Property: OrderPart.Quantity (int) Required, 16] }
                3 -> 12
            SELECT o1.OrderId, o1.CustomerName, o1.Description, o1.DeviceModel, o1.DeviceType, o1.OrderDate, o1.PhoneNumber, o1.Price, o1.RepairType, o1.ResponsibleMaster, o1.Status, o1.WarehouseRequestStatus, o0.Id, o0.Model, o0.Name, o0.OrderId, o0.Quantity
            FROM 
            (
                SELECT TOP(1) o.OrderId, o.CustomerName, o.Description, o.DeviceModel, o.DeviceType, o.OrderDate, o.PhoneNumber, o.Price, o.RepairType, o.ResponsibleMaster, o.Status, o.WarehouseRequestStatus
                FROM Orders AS o
                WHERE o.OrderId == @__response_OrderId_0
            ) AS o1
            LEFT JOIN OrderParts AS o0 ON o1.OrderId == o0.OrderId
            ORDER BY o1.OrderId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: Order.OrderId (string) Required PK AfterSave:Throw, 0], [Property: Order.CustomerName (string) Required, 1], [Property: Order.Description (string) Required, 2], [Property: Order.DeviceModel (string) Required, 3], [Property: Order.DeviceType (string) Required, 4], [Property: Order.OrderDate (string) Required, 5], [Property: Order.PhoneNumber (string) Required, 6], [Property: Order.Price (double) Required, 7], [Property: Order.RepairType (string) Required, 8], [Property: Order.ResponsibleMaster (string) Required, 9], [Property: Order.Status (string) Required, 10], [Property: Order.WarehouseRequestStatus (string) Required, 11] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: OrderPart.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 12], [Property: OrderPart.Model (string) Required, 13], [Property: OrderPart.Name (string) Required, 14], [Property: OrderPart.OrderId (string) Required FK Index, 15], [Property: OrderPart.Quantity (int) Required, 16] }
                3 -> 12
            SELECT o1.OrderId, o1.CustomerName, o1.Description, o1.DeviceModel, o1.DeviceType, o1.OrderDate, o1.PhoneNumber, o1.Price, o1.RepairType, o1.ResponsibleMaster, o1.Status, o1.WarehouseRequestStatus, o0.Id, o0.Model, o0.Name, o0.OrderId, o0.Quantity
            FROM 
            (
                SELECT TOP(1) o.OrderId, o.CustomerName, o.Description, o.DeviceModel, o.DeviceType, o.OrderDate, o.PhoneNumber, o.Price, o.RepairType, o.ResponsibleMaster, o.Status, o.WarehouseRequestStatus
                FROM Orders AS o
                WHERE o.OrderId == @__response_OrderId_0
            ) AS o1
            LEFT JOIN OrderParts AS o0 ON o1.OrderId == o0.OrderId
            ORDER BY o1.OrderId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                Order entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    Order instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(Order);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Order.OrderId PK | Resolver: c => c.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (Order)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: Order | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: Order | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order")]: 
                                {
                                    return 
                                    {
                                        Order instance;
                                        instance = new Order();
                                        instance.<OrderId>k__BackingField = dataReader.GetString(0);
                                        instance.<CustomerName>k__BackingField = dataReader.GetString(1);
                                        instance.<Description>k__BackingField = dataReader.GetString(2);
                                        instance.<DeviceModel>k__BackingField = dataReader.GetString(3);
                                        instance.<DeviceType>k__BackingField = dataReader.GetString(4);
                                        instance.<OrderDate>k__BackingField = dataReader.GetString(5);
                                        instance.<PhoneNumber>k__BackingField = dataReader.GetString(6);
                                        instance.<Price>k__BackingField = dataReader.GetDouble(7);
                                        instance.<RepairType>k__BackingField = dataReader.GetString(8);
                                        instance.<ResponsibleMaster>k__BackingField = dataReader.GetString(9);
                                        instance.<Status>k__BackingField = dataReader.GetString(10);
                                        instance.<WarehouseRequestStatus>k__BackingField = dataReader.GetString(11);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Order | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Order)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Order, Order>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (Order)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: Order.Parts (List<OrderPart>) Collection ToDependent OrderPart Inverse: Order | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order").FindNavigation("Parts")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Order, List<OrderPart>, OrderPart> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order").FindNavigation("Parts").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Order, OrderPart>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(12) ? default(int?) : (int?)dataReader.GetInt32(12) }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    OrderPart entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        OrderPart instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(OrderPart);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: OrderPart.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart").FindPrimaryKey()], 
                            keyValues: new object[]{ dataReader.IsDBNull(12) ? default(object) : (object)dataReader.GetInt32(12) }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (OrderPart)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: OrderPart | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: OrderPart | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart")]: 
                                    {
                                        return 
                                        {
                                            OrderPart instance;
                                            instance = new OrderPart();
                                            instance.<Id>k__BackingField = dataReader.IsDBNull(12) ? default(int) : dataReader.GetInt32(12);
                                            instance.<Model>k__BackingField = dataReader.IsDBNull(13) ? default(string) : dataReader.GetString(13);
                                            instance.<Name>k__BackingField = dataReader.IsDBNull(14) ? default(string) : dataReader.GetString(14);
                                            instance.<OrderId>k__BackingField = dataReader.IsDBNull(15) ? default(string) : dataReader.GetString(15);
                                            instance.<Quantity>k__BackingField = dataReader.IsDBNull(16) ? default(int) : dataReader.GetInt32(16);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: OrderPart | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(OrderPart)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    return entity;
                }, 
                inverseNavigation: [LIFTABLE Constant: Navigation: OrderPart.Order (Order) ToPrincipal Order Inverse: Parts | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart").FindNavigation("Order")], 
                fixup: (namelessParameter{9}, namelessParameter{10}) => 
                {
                    [LIFTABLE Constant: ClrICollectionAccessor<Order, List<OrderPart>, OrderPart> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order").FindNavigation("Parts").GetCollectionAccessor()].Add(
                        entity: namelessParameter{9}, 
                        value: namelessParameter{10}, 
                        forMaterialization: True);
                    return namelessParameter{10}.<Order>k__BackingField = namelessParameter{9};
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (Order)(resultContext.Values[0]) : default(Order);
        }, 
        contextType: ServiceCenter.DB.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-05-27 11:36:28.242 +03:00 [DBG] Creating DbConnection.
2025-05-27 11:36:28.242 +03:00 [DBG] Created DbConnection. (0ms).
2025-05-27 11:36:28.242 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:36:28.242 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:36:28.243 +03:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-05-27 11:36:28.243 +03:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-05-27 11:36:28.243 +03:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-05-27 11:36:28.243 +03:00 [DBG] Executing DbCommand [Parameters=[@__response_OrderId_0='?' (Size = 36)], CommandType='"Text"', CommandTimeout='30']
SELECT "o1"."OrderId", "o1"."CustomerName", "o1"."Description", "o1"."DeviceModel", "o1"."DeviceType", "o1"."OrderDate", "o1"."PhoneNumber", "o1"."Price", "o1"."RepairType", "o1"."ResponsibleMaster", "o1"."Status", "o1"."WarehouseRequestStatus", "o0"."Id", "o0"."Model", "o0"."Name", "o0"."OrderId", "o0"."Quantity"
FROM (
    SELECT "o"."OrderId", "o"."CustomerName", "o"."Description", "o"."DeviceModel", "o"."DeviceType", "o"."OrderDate", "o"."PhoneNumber", "o"."Price", "o"."RepairType", "o"."ResponsibleMaster", "o"."Status", "o"."WarehouseRequestStatus"
    FROM "Orders" AS "o"
    WHERE "o"."OrderId" = @__response_OrderId_0
    LIMIT 1
) AS "o1"
LEFT JOIN "OrderParts" AS "o0" ON "o1"."OrderId" = "o0"."OrderId"
ORDER BY "o1"."OrderId"
2025-05-27 11:36:28.243 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[@__response_OrderId_0='?' (Size = 36)], CommandType='"Text"', CommandTimeout='30']
SELECT "o1"."OrderId", "o1"."CustomerName", "o1"."Description", "o1"."DeviceModel", "o1"."DeviceType", "o1"."OrderDate", "o1"."PhoneNumber", "o1"."Price", "o1"."RepairType", "o1"."ResponsibleMaster", "o1"."Status", "o1"."WarehouseRequestStatus", "o0"."Id", "o0"."Model", "o0"."Name", "o0"."OrderId", "o0"."Quantity"
FROM (
    SELECT "o"."OrderId", "o"."CustomerName", "o"."Description", "o"."DeviceModel", "o"."DeviceType", "o"."OrderDate", "o"."PhoneNumber", "o"."Price", "o"."RepairType", "o"."ResponsibleMaster", "o"."Status", "o"."WarehouseRequestStatus"
    FROM "Orders" AS "o"
    WHERE "o"."OrderId" = @__response_OrderId_0
    LIMIT 1
) AS "o1"
LEFT JOIN "OrderParts" AS "o0" ON "o1"."OrderId" = "o0"."OrderId"
ORDER BY "o1"."OrderId"
2025-05-27 11:36:28.249 +03:00 [DBG] Context 'AppDbContext' started tracking 'Order' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:36:28.255 +03:00 [DBG] Context 'AppDbContext' started tracking 'OrderPart' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:36:28.256 +03:00 [DBG] Closing data reader to 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:36:28.256 +03:00 [DBG] A data reader for 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db' is being disposed after spending 12ms reading results.
2025-05-27 11:36:28.256 +03:00 [DBG] Closing connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:36:28.256 +03:00 [DBG] Closed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:36:28.261 +03:00 [DBG] 'AppDbContext' disposed.
2025-05-27 11:36:28.261 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:36:28.261 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:39:43.422 +03:00 [DBG] Hosting starting
2025-05-27 11:39:43.485 +03:00 [DBG] Hosting started
2025-05-27 11:39:43.488 +03:00 [DBG] Loaded hosting startup assembly OrdersServiceIntegationTests
2025-05-27 11:39:43.575 +03:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-05-27 11:39:44.050 +03:00 [DBG] Entity Framework Core 9.0.5 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.3' with options: None
2025-05-27 11:39:44.058 +03:00 [DBG] Creating DbConnection.
2025-05-27 11:39:44.067 +03:00 [DBG] Created DbConnection. (7ms).
2025-05-27 11:39:44.073 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:39:44.078 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:39:44.081 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:39:44.086 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:39:44.089 +03:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-05-27 11:39:44.090 +03:00 [DBG] Creating DbConnection.
2025-05-27 11:39:44.090 +03:00 [DBG] Created DbConnection. (0ms).
2025-05-27 11:39:44.095 +03:00 [DBG] Created DbCommand for 'ExecuteScalar' (2ms).
2025-05-27 11:39:44.096 +03:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (6ms).
2025-05-27 11:39:44.096 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:39:44.097 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:39:44.103 +03:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-05-27 11:39:44.129 +03:00 [INF] Executed DbCommand (17ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-05-27 11:39:44.131 +03:00 [DBG] Closing connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:39:44.133 +03:00 [DBG] Closed connection to database 'main' on server 'servicecenter.db' (2ms).
2025-05-27 11:39:44.134 +03:00 [DBG] 'AppDbContext' disposed.
2025-05-27 11:39:44.135 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:39:44.135 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:39:44.191 +03:00 [INF] Request starting HTTP/2 POST https://10.8.1.1:9080/OrdersService/CreateOrder - application/grpc null
2025-05-27 11:39:44.233 +03:00 [DBG] 3 candidate(s) found for the request path '/OrdersService/CreateOrder'
2025-05-27 11:39:44.236 +03:00 [DBG] Endpoint 'gRPC - /OrdersService/CreateOrder' with route pattern '/OrdersService/CreateOrder' is valid for the request path '/OrdersService/CreateOrder'
2025-05-27 11:39:44.237 +03:00 [DBG] Endpoint 'gRPC - Unimplemented method for OrdersService' with route pattern 'OrdersService/{unimplementedMethod:grpcunimplemented}' is valid for the request path '/OrdersService/CreateOrder'
2025-05-27 11:39:44.237 +03:00 [DBG] Endpoint 'gRPC - Unimplemented service' with route pattern '{unimplementedService}/{unimplementedMethod:grpcunimplemented}' is valid for the request path '/OrdersService/CreateOrder'
2025-05-27 11:39:44.238 +03:00 [DBG] Request matched endpoint 'gRPC - /OrdersService/CreateOrder'
2025-05-27 11:39:44.241 +03:00 [INF] Executing endpoint 'gRPC - /OrdersService/CreateOrder'
2025-05-27 11:39:44.248 +03:00 [DBG] Reading message.
2025-05-27 11:39:44.273 +03:00 [DBG] Entity Framework Core 9.0.5 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.3' with options: None
2025-05-27 11:39:44.276 +03:00 [DBG] Creating DbConnection.
2025-05-27 11:39:44.277 +03:00 [DBG] Created DbConnection. (0ms).
2025-05-27 11:39:44.277 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:39:44.277 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:39:44.277 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:39:44.277 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:39:44.277 +03:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-05-27 11:39:44.277 +03:00 [DBG] Creating DbConnection.
2025-05-27 11:39:44.277 +03:00 [DBG] Created DbConnection. (0ms).
2025-05-27 11:39:44.277 +03:00 [DBG] Created DbCommand for 'ExecuteScalar' (0ms).
2025-05-27 11:39:44.277 +03:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (0ms).
2025-05-27 11:39:44.277 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:39:44.278 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:39:44.278 +03:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-05-27 11:39:44.278 +03:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-05-27 11:39:44.278 +03:00 [DBG] Closing connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:39:44.278 +03:00 [DBG] Closed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:39:44.283 +03:00 [INF] Creating new order [ID: 92494874-f002-490c-9c09-2be627d1a144] for customer: Test Client
2025-05-27 11:39:44.359 +03:00 [DBG] Context 'AppDbContext' started tracking 'Order' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:39:44.371 +03:00 [DBG] 'AppDbContext' generated a temporary value for the property 'OrderPart.Id'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:39:44.391 +03:00 [DBG] The navigation 'OrderPart.Order' was detected as changed. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:39:44.400 +03:00 [DBG] Context 'AppDbContext' started tracking 'OrderPart' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:39:44.402 +03:00 [DBG] SaveChanges starting for 'AppDbContext'.
2025-05-27 11:39:44.405 +03:00 [DBG] DetectChanges starting for 'AppDbContext'.
2025-05-27 11:39:44.419 +03:00 [DBG] DetectChanges completed for 'AppDbContext'.
2025-05-27 11:39:44.535 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:39:44.536 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:39:44.538 +03:00 [DBG] Beginning transaction with isolation level 'Unspecified'.
2025-05-27 11:39:44.541 +03:00 [DBG] Began transaction with isolation level 'Serializable'.
2025-05-27 11:39:44.545 +03:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-05-27 11:39:44.545 +03:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-05-27 11:39:44.546 +03:00 [DBG] Initialized DbCommand for 'ExecuteReader' (1ms).
2025-05-27 11:39:44.548 +03:00 [DBG] Executing DbCommand [Parameters=[@p0='?' (Size = 36), @p1='?' (Size = 11), @p2='?', @p3='?' (Size = 7), @p4='?' (Size = 8), @p5='?' (Size = 10), @p6='?' (Size = 11), @p7='?' (DbType = Double), @p8='?' (Size = 13), @p9='?', @p10='?' (Size = 6), @p11='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Orders" ("OrderId", "CustomerName", "Description", "DeviceModel", "DeviceType", "OrderDate", "PhoneNumber", "Price", "RepairType", "ResponsibleMaster", "Status", "WarehouseRequestStatus")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11);
2025-05-27 11:39:44.581 +03:00 [INF] Executed DbCommand (34ms) [Parameters=[@p0='?' (Size = 36), @p1='?' (Size = 11), @p2='?', @p3='?' (Size = 7), @p4='?' (Size = 8), @p5='?' (Size = 10), @p6='?' (Size = 11), @p7='?' (DbType = Double), @p8='?' (Size = 13), @p9='?', @p10='?' (Size = 6), @p11='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Orders" ("OrderId", "CustomerName", "Description", "DeviceModel", "DeviceType", "OrderDate", "PhoneNumber", "Price", "RepairType", "ResponsibleMaster", "Status", "WarehouseRequestStatus")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11);
2025-05-27 11:39:44.587 +03:00 [DBG] Closing data reader to 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:39:44.589 +03:00 [DBG] A data reader for 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db' is being disposed after spending 6ms reading results.
2025-05-27 11:39:44.591 +03:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-05-27 11:39:44.592 +03:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-05-27 11:39:44.592 +03:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-05-27 11:39:44.592 +03:00 [DBG] Executing DbCommand [Parameters=[@p0='?', @p1='?' (Size = 5), @p2='?' (Size = 36), @p3='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "OrderParts" ("Model", "Name", "OrderId", "Quantity")
VALUES (@p0, @p1, @p2, @p3)
RETURNING "Id";
2025-05-27 11:39:44.593 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[@p0='?', @p1='?' (Size = 5), @p2='?' (Size = 36), @p3='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "OrderParts" ("Model", "Name", "OrderId", "Quantity")
VALUES (@p0, @p1, @p2, @p3)
RETURNING "Id";
2025-05-27 11:39:44.601 +03:00 [DBG] The foreign key property 'OrderPart.Id' was detected as changed. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see property values.
2025-05-27 11:39:44.604 +03:00 [DBG] Closing data reader to 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:39:44.604 +03:00 [DBG] A data reader for 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db' is being disposed after spending 11ms reading results.
2025-05-27 11:39:44.607 +03:00 [DBG] Committing transaction.
2025-05-27 11:39:44.616 +03:00 [DBG] Committed transaction.
2025-05-27 11:39:44.618 +03:00 [DBG] Closing connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:39:44.618 +03:00 [DBG] Closed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:39:44.619 +03:00 [DBG] Disposing transaction.
2025-05-27 11:39:44.626 +03:00 [DBG] An entity of type 'Order' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:39:44.628 +03:00 [DBG] An entity of type 'OrderPart' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:39:44.629 +03:00 [DBG] SaveChanges completed for 'AppDbContext' with 2 entities written to the database.
2025-05-27 11:39:44.630 +03:00 [INF] Order saved successfully. ID: 92494874-f002-490c-9c09-2be627d1a144
2025-05-27 11:39:44.635 +03:00 [ERR] Failed to send order to queue
System.ArgumentNullException: Value cannot be null. (Parameter 'value')
   at RabbitMQ.Client.ConnectionFactory.set_UserName(String value)
   at ServiceCenter.Services.OrdersServiceImpl.SendOrderToQueue(Order order) in D:\Desktop\ServiceCenter test\ServiceCenter\Services\OrdersServiceImpl.cs:line 303
2025-05-27 11:39:44.639 +03:00 [INF] Order created successfully. ID: 92494874-f002-490c-9c09-2be627d1a144
2025-05-27 11:39:44.644 +03:00 [DBG] Sending message.
2025-05-27 11:39:44.648 +03:00 [INF] Executed endpoint 'gRPC - /OrdersService/CreateOrder'
2025-05-27 11:39:44.654 +03:00 [DBG] 'AppDbContext' disposed.
2025-05-27 11:39:44.657 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:39:44.657 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:39:44.659 +03:00 [INF] Request finished HTTP/2 POST https://10.8.1.1:9080/OrdersService/CreateOrder - 200 null application/grpc 468.4552ms
2025-05-27 11:39:44.727 +03:00 [DBG] Entity Framework Core 9.0.5 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.3' with options: None
2025-05-27 11:39:44.771 +03:00 [DBG] Compiling query expression: 
'DbSet<Order>()
    .Include(o => o.Parts)
    .FirstOrDefault(o => o.OrderId == __response_OrderId_0)'
2025-05-27 11:39:44.806 +03:00 [DBG] Including navigation: 'Order.Parts'.
2025-05-27 11:39:44.991 +03:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<Order>(
    asyncEnumerable: SingleQueryingEnumerable.Create<Order>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: Order.OrderId (string) Required PK AfterSave:Throw, 0], [Property: Order.CustomerName (string) Required, 1], [Property: Order.Description (string) Required, 2], [Property: Order.DeviceModel (string) Required, 3], [Property: Order.DeviceType (string) Required, 4], [Property: Order.OrderDate (string) Required, 5], [Property: Order.PhoneNumber (string) Required, 6], [Property: Order.Price (double) Required, 7], [Property: Order.RepairType (string) Required, 8], [Property: Order.ResponsibleMaster (string) Required, 9], [Property: Order.Status (string) Required, 10], [Property: Order.WarehouseRequestStatus (string) Required, 11] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: OrderPart.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 12], [Property: OrderPart.Model (string) Required, 13], [Property: OrderPart.Name (string) Required, 14], [Property: OrderPart.OrderId (string) Required FK Index, 15], [Property: OrderPart.Quantity (int) Required, 16] }
                3 -> 12
            SELECT o1.OrderId, o1.CustomerName, o1.Description, o1.DeviceModel, o1.DeviceType, o1.OrderDate, o1.PhoneNumber, o1.Price, o1.RepairType, o1.ResponsibleMaster, o1.Status, o1.WarehouseRequestStatus, o0.Id, o0.Model, o0.Name, o0.OrderId, o0.Quantity
            FROM 
            (
                SELECT TOP(1) o.OrderId, o.CustomerName, o.Description, o.DeviceModel, o.DeviceType, o.OrderDate, o.PhoneNumber, o.Price, o.RepairType, o.ResponsibleMaster, o.Status, o.WarehouseRequestStatus
                FROM Orders AS o
                WHERE o.OrderId == @__response_OrderId_0
            ) AS o1
            LEFT JOIN OrderParts AS o0 ON o1.OrderId == o0.OrderId
            ORDER BY o1.OrderId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: Order.OrderId (string) Required PK AfterSave:Throw, 0], [Property: Order.CustomerName (string) Required, 1], [Property: Order.Description (string) Required, 2], [Property: Order.DeviceModel (string) Required, 3], [Property: Order.DeviceType (string) Required, 4], [Property: Order.OrderDate (string) Required, 5], [Property: Order.PhoneNumber (string) Required, 6], [Property: Order.Price (double) Required, 7], [Property: Order.RepairType (string) Required, 8], [Property: Order.ResponsibleMaster (string) Required, 9], [Property: Order.Status (string) Required, 10], [Property: Order.WarehouseRequestStatus (string) Required, 11] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: OrderPart.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 12], [Property: OrderPart.Model (string) Required, 13], [Property: OrderPart.Name (string) Required, 14], [Property: OrderPart.OrderId (string) Required FK Index, 15], [Property: OrderPart.Quantity (int) Required, 16] }
                3 -> 12
            SELECT o1.OrderId, o1.CustomerName, o1.Description, o1.DeviceModel, o1.DeviceType, o1.OrderDate, o1.PhoneNumber, o1.Price, o1.RepairType, o1.ResponsibleMaster, o1.Status, o1.WarehouseRequestStatus, o0.Id, o0.Model, o0.Name, o0.OrderId, o0.Quantity
            FROM 
            (
                SELECT TOP(1) o.OrderId, o.CustomerName, o.Description, o.DeviceModel, o.DeviceType, o.OrderDate, o.PhoneNumber, o.Price, o.RepairType, o.ResponsibleMaster, o.Status, o.WarehouseRequestStatus
                FROM Orders AS o
                WHERE o.OrderId == @__response_OrderId_0
            ) AS o1
            LEFT JOIN OrderParts AS o0 ON o1.OrderId == o0.OrderId
            ORDER BY o1.OrderId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                Order entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    Order instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(Order);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Order.OrderId PK | Resolver: c => c.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (Order)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: Order | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: Order | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order")]: 
                                {
                                    return 
                                    {
                                        Order instance;
                                        instance = new Order();
                                        instance.<OrderId>k__BackingField = dataReader.GetString(0);
                                        instance.<CustomerName>k__BackingField = dataReader.GetString(1);
                                        instance.<Description>k__BackingField = dataReader.GetString(2);
                                        instance.<DeviceModel>k__BackingField = dataReader.GetString(3);
                                        instance.<DeviceType>k__BackingField = dataReader.GetString(4);
                                        instance.<OrderDate>k__BackingField = dataReader.GetString(5);
                                        instance.<PhoneNumber>k__BackingField = dataReader.GetString(6);
                                        instance.<Price>k__BackingField = dataReader.GetDouble(7);
                                        instance.<RepairType>k__BackingField = dataReader.GetString(8);
                                        instance.<ResponsibleMaster>k__BackingField = dataReader.GetString(9);
                                        instance.<Status>k__BackingField = dataReader.GetString(10);
                                        instance.<WarehouseRequestStatus>k__BackingField = dataReader.GetString(11);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Order | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Order)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Order, Order>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (Order)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: Order.Parts (List<OrderPart>) Collection ToDependent OrderPart Inverse: Order | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order").FindNavigation("Parts")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Order, List<OrderPart>, OrderPart> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order").FindNavigation("Parts").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Order, OrderPart>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(12) ? default(int?) : (int?)dataReader.GetInt32(12) }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    OrderPart entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        OrderPart instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(OrderPart);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: OrderPart.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart").FindPrimaryKey()], 
                            keyValues: new object[]{ dataReader.IsDBNull(12) ? default(object) : (object)dataReader.GetInt32(12) }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (OrderPart)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: OrderPart | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: OrderPart | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart")]: 
                                    {
                                        return 
                                        {
                                            OrderPart instance;
                                            instance = new OrderPart();
                                            instance.<Id>k__BackingField = dataReader.IsDBNull(12) ? default(int) : dataReader.GetInt32(12);
                                            instance.<Model>k__BackingField = dataReader.IsDBNull(13) ? default(string) : dataReader.GetString(13);
                                            instance.<Name>k__BackingField = dataReader.IsDBNull(14) ? default(string) : dataReader.GetString(14);
                                            instance.<OrderId>k__BackingField = dataReader.IsDBNull(15) ? default(string) : dataReader.GetString(15);
                                            instance.<Quantity>k__BackingField = dataReader.IsDBNull(16) ? default(int) : dataReader.GetInt32(16);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: OrderPart | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(OrderPart)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    return entity;
                }, 
                inverseNavigation: [LIFTABLE Constant: Navigation: OrderPart.Order (Order) ToPrincipal Order Inverse: Parts | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart").FindNavigation("Order")], 
                fixup: (namelessParameter{9}, namelessParameter{10}) => 
                {
                    [LIFTABLE Constant: ClrICollectionAccessor<Order, List<OrderPart>, OrderPart> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order").FindNavigation("Parts").GetCollectionAccessor()].Add(
                        entity: namelessParameter{9}, 
                        value: namelessParameter{10}, 
                        forMaterialization: True);
                    return namelessParameter{10}.<Order>k__BackingField = namelessParameter{9};
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (Order)(resultContext.Values[0]) : default(Order);
        }, 
        contextType: ServiceCenter.DB.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-05-27 11:39:45.015 +03:00 [DBG] Creating DbConnection.
2025-05-27 11:39:45.015 +03:00 [DBG] Created DbConnection. (0ms).
2025-05-27 11:39:45.015 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:39:45.016 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:39:45.016 +03:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-05-27 11:39:45.016 +03:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-05-27 11:39:45.016 +03:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-05-27 11:39:45.016 +03:00 [DBG] Executing DbCommand [Parameters=[@__response_OrderId_0='?' (Size = 36)], CommandType='"Text"', CommandTimeout='30']
SELECT "o1"."OrderId", "o1"."CustomerName", "o1"."Description", "o1"."DeviceModel", "o1"."DeviceType", "o1"."OrderDate", "o1"."PhoneNumber", "o1"."Price", "o1"."RepairType", "o1"."ResponsibleMaster", "o1"."Status", "o1"."WarehouseRequestStatus", "o0"."Id", "o0"."Model", "o0"."Name", "o0"."OrderId", "o0"."Quantity"
FROM (
    SELECT "o"."OrderId", "o"."CustomerName", "o"."Description", "o"."DeviceModel", "o"."DeviceType", "o"."OrderDate", "o"."PhoneNumber", "o"."Price", "o"."RepairType", "o"."ResponsibleMaster", "o"."Status", "o"."WarehouseRequestStatus"
    FROM "Orders" AS "o"
    WHERE "o"."OrderId" = @__response_OrderId_0
    LIMIT 1
) AS "o1"
LEFT JOIN "OrderParts" AS "o0" ON "o1"."OrderId" = "o0"."OrderId"
ORDER BY "o1"."OrderId"
2025-05-27 11:39:45.016 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[@__response_OrderId_0='?' (Size = 36)], CommandType='"Text"', CommandTimeout='30']
SELECT "o1"."OrderId", "o1"."CustomerName", "o1"."Description", "o1"."DeviceModel", "o1"."DeviceType", "o1"."OrderDate", "o1"."PhoneNumber", "o1"."Price", "o1"."RepairType", "o1"."ResponsibleMaster", "o1"."Status", "o1"."WarehouseRequestStatus", "o0"."Id", "o0"."Model", "o0"."Name", "o0"."OrderId", "o0"."Quantity"
FROM (
    SELECT "o"."OrderId", "o"."CustomerName", "o"."Description", "o"."DeviceModel", "o"."DeviceType", "o"."OrderDate", "o"."PhoneNumber", "o"."Price", "o"."RepairType", "o"."ResponsibleMaster", "o"."Status", "o"."WarehouseRequestStatus"
    FROM "Orders" AS "o"
    WHERE "o"."OrderId" = @__response_OrderId_0
    LIMIT 1
) AS "o1"
LEFT JOIN "OrderParts" AS "o0" ON "o1"."OrderId" = "o0"."OrderId"
ORDER BY "o1"."OrderId"
2025-05-27 11:39:45.022 +03:00 [DBG] Context 'AppDbContext' started tracking 'Order' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:39:45.028 +03:00 [DBG] Context 'AppDbContext' started tracking 'OrderPart' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:39:45.029 +03:00 [DBG] Closing data reader to 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:39:45.029 +03:00 [DBG] A data reader for 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db' is being disposed after spending 12ms reading results.
2025-05-27 11:39:45.029 +03:00 [DBG] Closing connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:39:45.029 +03:00 [DBG] Closed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:39:45.032 +03:00 [DBG] 'AppDbContext' disposed.
2025-05-27 11:39:45.032 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:39:45.032 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:40:10.331 +03:00 [DBG] Hosting starting
2025-05-27 11:40:10.398 +03:00 [DBG] Hosting started
2025-05-27 11:40:10.401 +03:00 [DBG] Loaded hosting startup assembly OrdersServiceIntegationTests
2025-05-27 11:40:10.481 +03:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-05-27 11:40:10.980 +03:00 [DBG] Entity Framework Core 9.0.5 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.3' with options: None
2025-05-27 11:40:10.988 +03:00 [DBG] Creating DbConnection.
2025-05-27 11:40:10.999 +03:00 [DBG] Created DbConnection. (9ms).
2025-05-27 11:40:11.005 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:40:11.011 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:40:11.013 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:40:11.017 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:40:11.021 +03:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-05-27 11:40:11.021 +03:00 [DBG] Creating DbConnection.
2025-05-27 11:40:11.021 +03:00 [DBG] Created DbConnection. (0ms).
2025-05-27 11:40:11.026 +03:00 [DBG] Created DbCommand for 'ExecuteScalar' (2ms).
2025-05-27 11:40:11.027 +03:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (6ms).
2025-05-27 11:40:11.027 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:40:11.028 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:40:11.034 +03:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-05-27 11:40:11.055 +03:00 [INF] Executed DbCommand (14ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-05-27 11:40:11.058 +03:00 [DBG] Closing connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:40:11.061 +03:00 [DBG] Closed connection to database 'main' on server 'servicecenter.db' (4ms).
2025-05-27 11:40:11.062 +03:00 [DBG] 'AppDbContext' disposed.
2025-05-27 11:40:11.063 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:40:11.064 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:40:11.122 +03:00 [INF] Request starting HTTP/2 POST https://10.8.1.1:9080/OrdersService/CreateOrder - application/grpc null
2025-05-27 11:40:11.164 +03:00 [DBG] 3 candidate(s) found for the request path '/OrdersService/CreateOrder'
2025-05-27 11:40:11.166 +03:00 [DBG] Endpoint 'gRPC - /OrdersService/CreateOrder' with route pattern '/OrdersService/CreateOrder' is valid for the request path '/OrdersService/CreateOrder'
2025-05-27 11:40:11.167 +03:00 [DBG] Endpoint 'gRPC - Unimplemented method for OrdersService' with route pattern 'OrdersService/{unimplementedMethod:grpcunimplemented}' is valid for the request path '/OrdersService/CreateOrder'
2025-05-27 11:40:11.167 +03:00 [DBG] Endpoint 'gRPC - Unimplemented service' with route pattern '{unimplementedService}/{unimplementedMethod:grpcunimplemented}' is valid for the request path '/OrdersService/CreateOrder'
2025-05-27 11:40:11.168 +03:00 [DBG] Request matched endpoint 'gRPC - /OrdersService/CreateOrder'
2025-05-27 11:40:11.171 +03:00 [INF] Executing endpoint 'gRPC - /OrdersService/CreateOrder'
2025-05-27 11:40:11.178 +03:00 [DBG] Reading message.
2025-05-27 11:40:11.202 +03:00 [DBG] Entity Framework Core 9.0.5 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.3' with options: None
2025-05-27 11:40:11.204 +03:00 [DBG] Creating DbConnection.
2025-05-27 11:40:11.204 +03:00 [DBG] Created DbConnection. (0ms).
2025-05-27 11:40:11.204 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:40:11.205 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:40:11.205 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:40:11.205 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:40:11.205 +03:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-05-27 11:40:11.205 +03:00 [DBG] Creating DbConnection.
2025-05-27 11:40:11.205 +03:00 [DBG] Created DbConnection. (0ms).
2025-05-27 11:40:11.205 +03:00 [DBG] Created DbCommand for 'ExecuteScalar' (0ms).
2025-05-27 11:40:11.205 +03:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (0ms).
2025-05-27 11:40:11.205 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:40:11.205 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:40:11.205 +03:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-05-27 11:40:11.206 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-05-27 11:40:11.206 +03:00 [DBG] Closing connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:40:11.206 +03:00 [DBG] Closed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:40:11.211 +03:00 [INF] Creating new order [ID: 993be454-909c-4544-a61d-9824e4b7d85e] for customer: Test Client
2025-05-27 11:40:11.291 +03:00 [DBG] Context 'AppDbContext' started tracking 'Order' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:40:11.306 +03:00 [DBG] 'AppDbContext' generated a temporary value for the property 'OrderPart.Id'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:40:11.324 +03:00 [DBG] The navigation 'OrderPart.Order' was detected as changed. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:40:11.333 +03:00 [DBG] Context 'AppDbContext' started tracking 'OrderPart' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:40:11.335 +03:00 [DBG] SaveChanges starting for 'AppDbContext'.
2025-05-27 11:40:11.338 +03:00 [DBG] DetectChanges starting for 'AppDbContext'.
2025-05-27 11:40:11.349 +03:00 [DBG] DetectChanges completed for 'AppDbContext'.
2025-05-27 11:40:11.462 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:40:11.463 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:40:11.465 +03:00 [DBG] Beginning transaction with isolation level 'Unspecified'.
2025-05-27 11:40:11.469 +03:00 [DBG] Began transaction with isolation level 'Serializable'.
2025-05-27 11:40:11.472 +03:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-05-27 11:40:11.472 +03:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-05-27 11:40:11.474 +03:00 [DBG] Initialized DbCommand for 'ExecuteReader' (1ms).
2025-05-27 11:40:11.475 +03:00 [DBG] Executing DbCommand [Parameters=[@p0='?' (Size = 36), @p1='?' (Size = 11), @p2='?', @p3='?' (Size = 7), @p4='?' (Size = 8), @p5='?' (Size = 10), @p6='?' (Size = 11), @p7='?' (DbType = Double), @p8='?' (Size = 13), @p9='?', @p10='?' (Size = 6), @p11='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Orders" ("OrderId", "CustomerName", "Description", "DeviceModel", "DeviceType", "OrderDate", "PhoneNumber", "Price", "RepairType", "ResponsibleMaster", "Status", "WarehouseRequestStatus")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11);
2025-05-27 11:40:11.508 +03:00 [INF] Executed DbCommand (34ms) [Parameters=[@p0='?' (Size = 36), @p1='?' (Size = 11), @p2='?', @p3='?' (Size = 7), @p4='?' (Size = 8), @p5='?' (Size = 10), @p6='?' (Size = 11), @p7='?' (DbType = Double), @p8='?' (Size = 13), @p9='?', @p10='?' (Size = 6), @p11='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Orders" ("OrderId", "CustomerName", "Description", "DeviceModel", "DeviceType", "OrderDate", "PhoneNumber", "Price", "RepairType", "ResponsibleMaster", "Status", "WarehouseRequestStatus")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11);
2025-05-27 11:40:11.512 +03:00 [DBG] Closing data reader to 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:40:11.514 +03:00 [DBG] A data reader for 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db' is being disposed after spending 5ms reading results.
2025-05-27 11:40:11.516 +03:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-05-27 11:40:11.516 +03:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-05-27 11:40:11.516 +03:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-05-27 11:40:11.516 +03:00 [DBG] Executing DbCommand [Parameters=[@p0='?', @p1='?' (Size = 5), @p2='?' (Size = 36), @p3='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "OrderParts" ("Model", "Name", "OrderId", "Quantity")
VALUES (@p0, @p1, @p2, @p3)
RETURNING "Id";
2025-05-27 11:40:11.517 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[@p0='?', @p1='?' (Size = 5), @p2='?' (Size = 36), @p3='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "OrderParts" ("Model", "Name", "OrderId", "Quantity")
VALUES (@p0, @p1, @p2, @p3)
RETURNING "Id";
2025-05-27 11:40:11.526 +03:00 [DBG] The foreign key property 'OrderPart.Id' was detected as changed. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see property values.
2025-05-27 11:40:11.529 +03:00 [DBG] Closing data reader to 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:40:11.529 +03:00 [DBG] A data reader for 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db' is being disposed after spending 11ms reading results.
2025-05-27 11:40:11.531 +03:00 [DBG] Committing transaction.
2025-05-27 11:40:11.539 +03:00 [DBG] Committed transaction.
2025-05-27 11:40:11.542 +03:00 [DBG] Closing connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:40:11.542 +03:00 [DBG] Closed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:40:11.544 +03:00 [DBG] Disposing transaction.
2025-05-27 11:40:11.550 +03:00 [DBG] An entity of type 'Order' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:40:11.553 +03:00 [DBG] An entity of type 'OrderPart' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:40:11.554 +03:00 [DBG] SaveChanges completed for 'AppDbContext' with 2 entities written to the database.
2025-05-27 11:40:11.555 +03:00 [INF] Order saved successfully. ID: 993be454-909c-4544-a61d-9824e4b7d85e
2025-05-27 11:40:11.561 +03:00 [ERR] Failed to send order to queue
System.ArgumentNullException: Value cannot be null. (Parameter 'value')
   at RabbitMQ.Client.ConnectionFactory.set_UserName(String value)
   at ServiceCenter.Services.OrdersServiceImpl.SendOrderToQueue(Order order) in D:\Desktop\ServiceCenter test\ServiceCenter\Services\OrdersServiceImpl.cs:line 303
2025-05-27 11:40:11.565 +03:00 [INF] Order created successfully. ID: 993be454-909c-4544-a61d-9824e4b7d85e
2025-05-27 11:40:11.569 +03:00 [DBG] Sending message.
2025-05-27 11:40:11.574 +03:00 [INF] Executed endpoint 'gRPC - /OrdersService/CreateOrder'
2025-05-27 11:40:11.578 +03:00 [DBG] 'AppDbContext' disposed.
2025-05-27 11:40:11.580 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:40:11.580 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:40:11.581 +03:00 [INF] Request finished HTTP/2 POST https://10.8.1.1:9080/OrdersService/CreateOrder - 200 null application/grpc 460.75ms
2025-05-27 11:40:11.661 +03:00 [DBG] Entity Framework Core 9.0.5 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.3' with options: None
2025-05-27 11:40:11.706 +03:00 [DBG] Compiling query expression: 
'DbSet<Order>()
    .Include(o => o.Parts)
    .FirstOrDefault(o => o.OrderId == __response_OrderId_0)'
2025-05-27 11:40:11.748 +03:00 [DBG] Including navigation: 'Order.Parts'.
2025-05-27 11:40:11.953 +03:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<Order>(
    asyncEnumerable: SingleQueryingEnumerable.Create<Order>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: Order.OrderId (string) Required PK AfterSave:Throw, 0], [Property: Order.CustomerName (string) Required, 1], [Property: Order.Description (string) Required, 2], [Property: Order.DeviceModel (string) Required, 3], [Property: Order.DeviceType (string) Required, 4], [Property: Order.OrderDate (string) Required, 5], [Property: Order.PhoneNumber (string) Required, 6], [Property: Order.Price (double) Required, 7], [Property: Order.RepairType (string) Required, 8], [Property: Order.ResponsibleMaster (string) Required, 9], [Property: Order.Status (string) Required, 10], [Property: Order.WarehouseRequestStatus (string) Required, 11] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: OrderPart.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 12], [Property: OrderPart.Model (string) Required, 13], [Property: OrderPart.Name (string) Required, 14], [Property: OrderPart.OrderId (string) Required FK Index, 15], [Property: OrderPart.Quantity (int) Required, 16] }
                3 -> 12
            SELECT o1.OrderId, o1.CustomerName, o1.Description, o1.DeviceModel, o1.DeviceType, o1.OrderDate, o1.PhoneNumber, o1.Price, o1.RepairType, o1.ResponsibleMaster, o1.Status, o1.WarehouseRequestStatus, o0.Id, o0.Model, o0.Name, o0.OrderId, o0.Quantity
            FROM 
            (
                SELECT TOP(1) o.OrderId, o.CustomerName, o.Description, o.DeviceModel, o.DeviceType, o.OrderDate, o.PhoneNumber, o.Price, o.RepairType, o.ResponsibleMaster, o.Status, o.WarehouseRequestStatus
                FROM Orders AS o
                WHERE o.OrderId == @__response_OrderId_0
            ) AS o1
            LEFT JOIN OrderParts AS o0 ON o1.OrderId == o0.OrderId
            ORDER BY o1.OrderId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: Order.OrderId (string) Required PK AfterSave:Throw, 0], [Property: Order.CustomerName (string) Required, 1], [Property: Order.Description (string) Required, 2], [Property: Order.DeviceModel (string) Required, 3], [Property: Order.DeviceType (string) Required, 4], [Property: Order.OrderDate (string) Required, 5], [Property: Order.PhoneNumber (string) Required, 6], [Property: Order.Price (double) Required, 7], [Property: Order.RepairType (string) Required, 8], [Property: Order.ResponsibleMaster (string) Required, 9], [Property: Order.Status (string) Required, 10], [Property: Order.WarehouseRequestStatus (string) Required, 11] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: OrderPart.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 12], [Property: OrderPart.Model (string) Required, 13], [Property: OrderPart.Name (string) Required, 14], [Property: OrderPart.OrderId (string) Required FK Index, 15], [Property: OrderPart.Quantity (int) Required, 16] }
                3 -> 12
            SELECT o1.OrderId, o1.CustomerName, o1.Description, o1.DeviceModel, o1.DeviceType, o1.OrderDate, o1.PhoneNumber, o1.Price, o1.RepairType, o1.ResponsibleMaster, o1.Status, o1.WarehouseRequestStatus, o0.Id, o0.Model, o0.Name, o0.OrderId, o0.Quantity
            FROM 
            (
                SELECT TOP(1) o.OrderId, o.CustomerName, o.Description, o.DeviceModel, o.DeviceType, o.OrderDate, o.PhoneNumber, o.Price, o.RepairType, o.ResponsibleMaster, o.Status, o.WarehouseRequestStatus
                FROM Orders AS o
                WHERE o.OrderId == @__response_OrderId_0
            ) AS o1
            LEFT JOIN OrderParts AS o0 ON o1.OrderId == o0.OrderId
            ORDER BY o1.OrderId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                Order entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    Order instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(Order);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Order.OrderId PK | Resolver: c => c.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (Order)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: Order | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: Order | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order")]: 
                                {
                                    return 
                                    {
                                        Order instance;
                                        instance = new Order();
                                        instance.<OrderId>k__BackingField = dataReader.GetString(0);
                                        instance.<CustomerName>k__BackingField = dataReader.GetString(1);
                                        instance.<Description>k__BackingField = dataReader.GetString(2);
                                        instance.<DeviceModel>k__BackingField = dataReader.GetString(3);
                                        instance.<DeviceType>k__BackingField = dataReader.GetString(4);
                                        instance.<OrderDate>k__BackingField = dataReader.GetString(5);
                                        instance.<PhoneNumber>k__BackingField = dataReader.GetString(6);
                                        instance.<Price>k__BackingField = dataReader.GetDouble(7);
                                        instance.<RepairType>k__BackingField = dataReader.GetString(8);
                                        instance.<ResponsibleMaster>k__BackingField = dataReader.GetString(9);
                                        instance.<Status>k__BackingField = dataReader.GetString(10);
                                        instance.<WarehouseRequestStatus>k__BackingField = dataReader.GetString(11);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Order | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Order)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Order, Order>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (Order)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: Order.Parts (List<OrderPart>) Collection ToDependent OrderPart Inverse: Order | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order").FindNavigation("Parts")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Order, List<OrderPart>, OrderPart> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order").FindNavigation("Parts").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Order, OrderPart>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(12) ? default(int?) : (int?)dataReader.GetInt32(12) }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    OrderPart entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        OrderPart instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(OrderPart);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: OrderPart.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart").FindPrimaryKey()], 
                            keyValues: new object[]{ dataReader.IsDBNull(12) ? default(object) : (object)dataReader.GetInt32(12) }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (OrderPart)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: OrderPart | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: OrderPart | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart")]: 
                                    {
                                        return 
                                        {
                                            OrderPart instance;
                                            instance = new OrderPart();
                                            instance.<Id>k__BackingField = dataReader.IsDBNull(12) ? default(int) : dataReader.GetInt32(12);
                                            instance.<Model>k__BackingField = dataReader.IsDBNull(13) ? default(string) : dataReader.GetString(13);
                                            instance.<Name>k__BackingField = dataReader.IsDBNull(14) ? default(string) : dataReader.GetString(14);
                                            instance.<OrderId>k__BackingField = dataReader.IsDBNull(15) ? default(string) : dataReader.GetString(15);
                                            instance.<Quantity>k__BackingField = dataReader.IsDBNull(16) ? default(int) : dataReader.GetInt32(16);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: OrderPart | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(OrderPart)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    return entity;
                }, 
                inverseNavigation: [LIFTABLE Constant: Navigation: OrderPart.Order (Order) ToPrincipal Order Inverse: Parts | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart").FindNavigation("Order")], 
                fixup: (namelessParameter{9}, namelessParameter{10}) => 
                {
                    [LIFTABLE Constant: ClrICollectionAccessor<Order, List<OrderPart>, OrderPart> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order").FindNavigation("Parts").GetCollectionAccessor()].Add(
                        entity: namelessParameter{9}, 
                        value: namelessParameter{10}, 
                        forMaterialization: True);
                    return namelessParameter{10}.<Order>k__BackingField = namelessParameter{9};
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (Order)(resultContext.Values[0]) : default(Order);
        }, 
        contextType: ServiceCenter.DB.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-05-27 11:40:11.990 +03:00 [DBG] Creating DbConnection.
2025-05-27 11:40:11.990 +03:00 [DBG] Created DbConnection. (0ms).
2025-05-27 11:40:11.990 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:40:11.991 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:40:11.991 +03:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-05-27 11:40:11.991 +03:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-05-27 11:40:11.991 +03:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-05-27 11:40:11.991 +03:00 [DBG] Executing DbCommand [Parameters=[@__response_OrderId_0='?' (Size = 36)], CommandType='"Text"', CommandTimeout='30']
SELECT "o1"."OrderId", "o1"."CustomerName", "o1"."Description", "o1"."DeviceModel", "o1"."DeviceType", "o1"."OrderDate", "o1"."PhoneNumber", "o1"."Price", "o1"."RepairType", "o1"."ResponsibleMaster", "o1"."Status", "o1"."WarehouseRequestStatus", "o0"."Id", "o0"."Model", "o0"."Name", "o0"."OrderId", "o0"."Quantity"
FROM (
    SELECT "o"."OrderId", "o"."CustomerName", "o"."Description", "o"."DeviceModel", "o"."DeviceType", "o"."OrderDate", "o"."PhoneNumber", "o"."Price", "o"."RepairType", "o"."ResponsibleMaster", "o"."Status", "o"."WarehouseRequestStatus"
    FROM "Orders" AS "o"
    WHERE "o"."OrderId" = @__response_OrderId_0
    LIMIT 1
) AS "o1"
LEFT JOIN "OrderParts" AS "o0" ON "o1"."OrderId" = "o0"."OrderId"
ORDER BY "o1"."OrderId"
2025-05-27 11:40:11.991 +03:00 [INF] Executed DbCommand (0ms) [Parameters=[@__response_OrderId_0='?' (Size = 36)], CommandType='"Text"', CommandTimeout='30']
SELECT "o1"."OrderId", "o1"."CustomerName", "o1"."Description", "o1"."DeviceModel", "o1"."DeviceType", "o1"."OrderDate", "o1"."PhoneNumber", "o1"."Price", "o1"."RepairType", "o1"."ResponsibleMaster", "o1"."Status", "o1"."WarehouseRequestStatus", "o0"."Id", "o0"."Model", "o0"."Name", "o0"."OrderId", "o0"."Quantity"
FROM (
    SELECT "o"."OrderId", "o"."CustomerName", "o"."Description", "o"."DeviceModel", "o"."DeviceType", "o"."OrderDate", "o"."PhoneNumber", "o"."Price", "o"."RepairType", "o"."ResponsibleMaster", "o"."Status", "o"."WarehouseRequestStatus"
    FROM "Orders" AS "o"
    WHERE "o"."OrderId" = @__response_OrderId_0
    LIMIT 1
) AS "o1"
LEFT JOIN "OrderParts" AS "o0" ON "o1"."OrderId" = "o0"."OrderId"
ORDER BY "o1"."OrderId"
2025-05-27 11:40:11.998 +03:00 [DBG] Context 'AppDbContext' started tracking 'Order' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:40:12.005 +03:00 [DBG] Context 'AppDbContext' started tracking 'OrderPart' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 11:40:12.006 +03:00 [DBG] Closing data reader to 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:40:12.006 +03:00 [DBG] A data reader for 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db' is being disposed after spending 14ms reading results.
2025-05-27 11:40:12.006 +03:00 [DBG] Closing connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 11:40:12.006 +03:00 [DBG] Closed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 11:40:12.010 +03:00 [DBG] 'AppDbContext' disposed.
2025-05-27 11:40:12.010 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 11:40:12.010 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 15:53:05.640 +03:00 [DBG] Hosting starting
2025-05-27 15:53:05.670 +03:00 [DBG] Hosting started
2025-05-27 15:53:05.672 +03:00 [DBG] Loaded hosting startup assembly OrdersServiceIntegationTests
2025-05-27 15:53:05.708 +03:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-05-27 15:53:05.942 +03:00 [DBG] Entity Framework Core 9.0.5 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.3' with options: None
2025-05-27 15:53:05.948 +03:00 [DBG] Creating DbConnection.
2025-05-27 15:53:05.952 +03:00 [DBG] Created DbConnection. (4ms).
2025-05-27 15:53:05.955 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 15:53:05.959 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 15:53:05.960 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 15:53:05.962 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 15:53:05.964 +03:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-05-27 15:53:05.964 +03:00 [DBG] Creating DbConnection.
2025-05-27 15:53:05.964 +03:00 [DBG] Created DbConnection. (0ms).
2025-05-27 15:53:05.966 +03:00 [DBG] Created DbCommand for 'ExecuteScalar' (1ms).
2025-05-27 15:53:05.967 +03:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (3ms).
2025-05-27 15:53:05.967 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 15:53:05.967 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 15:53:05.970 +03:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-05-27 15:53:05.981 +03:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-05-27 15:53:05.982 +03:00 [DBG] Closing connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 15:53:05.983 +03:00 [DBG] Closed connection to database 'main' on server 'servicecenter.db' (1ms).
2025-05-27 15:53:05.984 +03:00 [DBG] 'AppDbContext' disposed.
2025-05-27 15:53:05.984 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 15:53:05.984 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 15:53:06.010 +03:00 [INF] Request starting HTTP/2 POST https://10.8.1.1:9080/OrdersService/CreateOrder - application/grpc null
2025-05-27 15:53:06.030 +03:00 [DBG] 3 candidate(s) found for the request path '/OrdersService/CreateOrder'
2025-05-27 15:53:06.031 +03:00 [DBG] Endpoint 'gRPC - /OrdersService/CreateOrder' with route pattern '/OrdersService/CreateOrder' is valid for the request path '/OrdersService/CreateOrder'
2025-05-27 15:53:06.031 +03:00 [DBG] Endpoint 'gRPC - Unimplemented method for OrdersService' with route pattern 'OrdersService/{unimplementedMethod:grpcunimplemented}' is valid for the request path '/OrdersService/CreateOrder'
2025-05-27 15:53:06.031 +03:00 [DBG] Endpoint 'gRPC - Unimplemented service' with route pattern '{unimplementedService}/{unimplementedMethod:grpcunimplemented}' is valid for the request path '/OrdersService/CreateOrder'
2025-05-27 15:53:06.032 +03:00 [DBG] Request matched endpoint 'gRPC - /OrdersService/CreateOrder'
2025-05-27 15:53:06.033 +03:00 [INF] Executing endpoint 'gRPC - /OrdersService/CreateOrder'
2025-05-27 15:53:06.038 +03:00 [DBG] Reading message.
2025-05-27 15:53:06.050 +03:00 [DBG] Entity Framework Core 9.0.5 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.3' with options: None
2025-05-27 15:53:06.052 +03:00 [DBG] Creating DbConnection.
2025-05-27 15:53:06.052 +03:00 [DBG] Created DbConnection. (0ms).
2025-05-27 15:53:06.052 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 15:53:06.052 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 15:53:06.052 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 15:53:06.052 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 15:53:06.052 +03:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-05-27 15:53:06.052 +03:00 [DBG] Creating DbConnection.
2025-05-27 15:53:06.052 +03:00 [DBG] Created DbConnection. (0ms).
2025-05-27 15:53:06.052 +03:00 [DBG] Created DbCommand for 'ExecuteScalar' (0ms).
2025-05-27 15:53:06.052 +03:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (0ms).
2025-05-27 15:53:06.052 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 15:53:06.052 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 15:53:06.052 +03:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-05-27 15:53:06.053 +03:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-05-27 15:53:06.053 +03:00 [DBG] Closing connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 15:53:06.053 +03:00 [DBG] Closed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 15:53:06.056 +03:00 [INF] Creating new order [ID: ca8f1ee7-7ba9-48a8-a140-dbdbf7e17664] for customer: Test Client
2025-05-27 15:53:06.097 +03:00 [DBG] Context 'AppDbContext' started tracking 'Order' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 15:53:06.105 +03:00 [DBG] 'AppDbContext' generated a temporary value for the property 'OrderPart.Id'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 15:53:06.116 +03:00 [DBG] The navigation 'OrderPart.Order' was detected as changed. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 15:53:06.123 +03:00 [DBG] Context 'AppDbContext' started tracking 'OrderPart' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 15:53:06.125 +03:00 [DBG] SaveChanges starting for 'AppDbContext'.
2025-05-27 15:53:06.126 +03:00 [DBG] DetectChanges starting for 'AppDbContext'.
2025-05-27 15:53:06.134 +03:00 [DBG] DetectChanges completed for 'AppDbContext'.
2025-05-27 15:53:06.196 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 15:53:06.197 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 15:53:06.197 +03:00 [DBG] Beginning transaction with isolation level 'Unspecified'.
2025-05-27 15:53:06.200 +03:00 [DBG] Began transaction with isolation level 'Serializable'.
2025-05-27 15:53:06.202 +03:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-05-27 15:53:06.202 +03:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-05-27 15:53:06.203 +03:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-05-27 15:53:06.204 +03:00 [DBG] Executing DbCommand [Parameters=[@p0='?' (Size = 36), @p1='?' (Size = 11), @p2='?', @p3='?' (Size = 7), @p4='?' (Size = 8), @p5='?' (Size = 10), @p6='?' (Size = 11), @p7='?' (DbType = Double), @p8='?' (Size = 13), @p9='?', @p10='?' (Size = 6), @p11='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Orders" ("OrderId", "CustomerName", "Description", "DeviceModel", "DeviceType", "OrderDate", "PhoneNumber", "Price", "RepairType", "ResponsibleMaster", "Status", "WarehouseRequestStatus")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11);
2025-05-27 15:53:06.209 +03:00 [INF] Executed DbCommand (6ms) [Parameters=[@p0='?' (Size = 36), @p1='?' (Size = 11), @p2='?', @p3='?' (Size = 7), @p4='?' (Size = 8), @p5='?' (Size = 10), @p6='?' (Size = 11), @p7='?' (DbType = Double), @p8='?' (Size = 13), @p9='?', @p10='?' (Size = 6), @p11='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Orders" ("OrderId", "CustomerName", "Description", "DeviceModel", "DeviceType", "OrderDate", "PhoneNumber", "Price", "RepairType", "ResponsibleMaster", "Status", "WarehouseRequestStatus")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11);
2025-05-27 15:53:06.211 +03:00 [DBG] Closing data reader to 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 15:53:06.212 +03:00 [DBG] A data reader for 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db' is being disposed after spending 2ms reading results.
2025-05-27 15:53:06.213 +03:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-05-27 15:53:06.213 +03:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-05-27 15:53:06.213 +03:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-05-27 15:53:06.213 +03:00 [DBG] Executing DbCommand [Parameters=[@p0='?', @p1='?' (Size = 5), @p2='?' (Size = 36), @p3='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "OrderParts" ("Model", "Name", "OrderId", "Quantity")
VALUES (@p0, @p1, @p2, @p3)
RETURNING "Id";
2025-05-27 15:53:06.214 +03:00 [INF] Executed DbCommand (1ms) [Parameters=[@p0='?', @p1='?' (Size = 5), @p2='?' (Size = 36), @p3='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "OrderParts" ("Model", "Name", "OrderId", "Quantity")
VALUES (@p0, @p1, @p2, @p3)
RETURNING "Id";
2025-05-27 15:53:06.218 +03:00 [DBG] The foreign key property 'OrderPart.Id' was detected as changed. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see property values.
2025-05-27 15:53:06.220 +03:00 [DBG] Closing data reader to 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 15:53:06.220 +03:00 [DBG] A data reader for 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db' is being disposed after spending 5ms reading results.
2025-05-27 15:53:06.221 +03:00 [DBG] Committing transaction.
2025-05-27 15:53:06.227 +03:00 [DBG] Committed transaction.
2025-05-27 15:53:06.228 +03:00 [DBG] Closing connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 15:53:06.228 +03:00 [DBG] Closed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 15:53:06.229 +03:00 [DBG] Disposing transaction.
2025-05-27 15:53:06.232 +03:00 [DBG] An entity of type 'Order' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 15:53:06.233 +03:00 [DBG] An entity of type 'OrderPart' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 15:53:06.234 +03:00 [DBG] SaveChanges completed for 'AppDbContext' with 2 entities written to the database.
2025-05-27 15:53:06.234 +03:00 [INF] Order saved successfully. ID: ca8f1ee7-7ba9-48a8-a140-dbdbf7e17664
2025-05-27 15:53:06.237 +03:00 [ERR] Failed to send order to queue
System.ArgumentNullException: Value cannot be null. (Parameter 'value')
   at RabbitMQ.Client.ConnectionFactory.set_UserName(String value)
   at ServiceCenter.Services.OrdersServiceImpl.SendOrderToQueue(Order order) in D:\Desktop\ServiceCenter test\ServiceCenter\Services\OrdersServiceImpl.cs:line 303
2025-05-27 15:53:06.239 +03:00 [INF] Order created successfully. ID: ca8f1ee7-7ba9-48a8-a140-dbdbf7e17664
2025-05-27 15:53:06.242 +03:00 [DBG] Sending message.
2025-05-27 15:53:06.244 +03:00 [INF] Executed endpoint 'gRPC - /OrdersService/CreateOrder'
2025-05-27 15:53:06.246 +03:00 [DBG] 'AppDbContext' disposed.
2025-05-27 15:53:06.247 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 15:53:06.247 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 15:53:06.248 +03:00 [INF] Request finished HTTP/2 POST https://10.8.1.1:9080/OrdersService/CreateOrder - 200 null application/grpc 238.3625ms
2025-05-27 15:53:06.285 +03:00 [DBG] Entity Framework Core 9.0.5 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.3' with options: None
2025-05-27 15:53:06.308 +03:00 [DBG] Compiling query expression: 
'DbSet<Order>()
    .Include(o => o.Parts)
    .FirstOrDefault(o => o.OrderId == __response_OrderId_0)'
2025-05-27 15:53:06.328 +03:00 [DBG] Including navigation: 'Order.Parts'.
2025-05-27 15:53:06.422 +03:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<Order>(
    asyncEnumerable: SingleQueryingEnumerable.Create<Order>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: Order.OrderId (string) Required PK AfterSave:Throw, 0], [Property: Order.CustomerName (string) Required, 1], [Property: Order.Description (string) Required, 2], [Property: Order.DeviceModel (string) Required, 3], [Property: Order.DeviceType (string) Required, 4], [Property: Order.OrderDate (string) Required, 5], [Property: Order.PhoneNumber (string) Required, 6], [Property: Order.Price (double) Required, 7], [Property: Order.RepairType (string) Required, 8], [Property: Order.ResponsibleMaster (string) Required, 9], [Property: Order.Status (string) Required, 10], [Property: Order.WarehouseRequestStatus (string) Required, 11] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: OrderPart.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 12], [Property: OrderPart.Model (string) Required, 13], [Property: OrderPart.Name (string) Required, 14], [Property: OrderPart.OrderId (string) Required FK Index, 15], [Property: OrderPart.Quantity (int) Required, 16] }
                3 -> 12
            SELECT o1.OrderId, o1.CustomerName, o1.Description, o1.DeviceModel, o1.DeviceType, o1.OrderDate, o1.PhoneNumber, o1.Price, o1.RepairType, o1.ResponsibleMaster, o1.Status, o1.WarehouseRequestStatus, o0.Id, o0.Model, o0.Name, o0.OrderId, o0.Quantity
            FROM 
            (
                SELECT TOP(1) o.OrderId, o.CustomerName, o.Description, o.DeviceModel, o.DeviceType, o.OrderDate, o.PhoneNumber, o.Price, o.RepairType, o.ResponsibleMaster, o.Status, o.WarehouseRequestStatus
                FROM Orders AS o
                WHERE o.OrderId == @__response_OrderId_0
            ) AS o1
            LEFT JOIN OrderParts AS o0 ON o1.OrderId == o0.OrderId
            ORDER BY o1.OrderId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: Order.OrderId (string) Required PK AfterSave:Throw, 0], [Property: Order.CustomerName (string) Required, 1], [Property: Order.Description (string) Required, 2], [Property: Order.DeviceModel (string) Required, 3], [Property: Order.DeviceType (string) Required, 4], [Property: Order.OrderDate (string) Required, 5], [Property: Order.PhoneNumber (string) Required, 6], [Property: Order.Price (double) Required, 7], [Property: Order.RepairType (string) Required, 8], [Property: Order.ResponsibleMaster (string) Required, 9], [Property: Order.Status (string) Required, 10], [Property: Order.WarehouseRequestStatus (string) Required, 11] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: OrderPart.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 12], [Property: OrderPart.Model (string) Required, 13], [Property: OrderPart.Name (string) Required, 14], [Property: OrderPart.OrderId (string) Required FK Index, 15], [Property: OrderPart.Quantity (int) Required, 16] }
                3 -> 12
            SELECT o1.OrderId, o1.CustomerName, o1.Description, o1.DeviceModel, o1.DeviceType, o1.OrderDate, o1.PhoneNumber, o1.Price, o1.RepairType, o1.ResponsibleMaster, o1.Status, o1.WarehouseRequestStatus, o0.Id, o0.Model, o0.Name, o0.OrderId, o0.Quantity
            FROM 
            (
                SELECT TOP(1) o.OrderId, o.CustomerName, o.Description, o.DeviceModel, o.DeviceType, o.OrderDate, o.PhoneNumber, o.Price, o.RepairType, o.ResponsibleMaster, o.Status, o.WarehouseRequestStatus
                FROM Orders AS o
                WHERE o.OrderId == @__response_OrderId_0
            ) AS o1
            LEFT JOIN OrderParts AS o0 ON o1.OrderId == o0.OrderId
            ORDER BY o1.OrderId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                Order entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    Order instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(Order);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Order.OrderId PK | Resolver: c => c.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (Order)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: Order | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: Order | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order")]: 
                                {
                                    return 
                                    {
                                        Order instance;
                                        instance = new Order();
                                        instance.<OrderId>k__BackingField = dataReader.GetString(0);
                                        instance.<CustomerName>k__BackingField = dataReader.GetString(1);
                                        instance.<Description>k__BackingField = dataReader.GetString(2);
                                        instance.<DeviceModel>k__BackingField = dataReader.GetString(3);
                                        instance.<DeviceType>k__BackingField = dataReader.GetString(4);
                                        instance.<OrderDate>k__BackingField = dataReader.GetString(5);
                                        instance.<PhoneNumber>k__BackingField = dataReader.GetString(6);
                                        instance.<Price>k__BackingField = dataReader.GetDouble(7);
                                        instance.<RepairType>k__BackingField = dataReader.GetString(8);
                                        instance.<ResponsibleMaster>k__BackingField = dataReader.GetString(9);
                                        instance.<Status>k__BackingField = dataReader.GetString(10);
                                        instance.<WarehouseRequestStatus>k__BackingField = dataReader.GetString(11);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Order | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Order)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Order, Order>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (Order)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: Order.Parts (List<OrderPart>) Collection ToDependent OrderPart Inverse: Order | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order").FindNavigation("Parts")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Order, List<OrderPart>, OrderPart> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order").FindNavigation("Parts").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Order, OrderPart>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(12) ? default(int?) : (int?)dataReader.GetInt32(12) }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    OrderPart entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        OrderPart instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(OrderPart);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: OrderPart.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart").FindPrimaryKey()], 
                            keyValues: new object[]{ dataReader.IsDBNull(12) ? default(object) : (object)dataReader.GetInt32(12) }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (OrderPart)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: OrderPart | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: OrderPart | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart")]: 
                                    {
                                        return 
                                        {
                                            OrderPart instance;
                                            instance = new OrderPart();
                                            instance.<Id>k__BackingField = dataReader.IsDBNull(12) ? default(int) : dataReader.GetInt32(12);
                                            instance.<Model>k__BackingField = dataReader.IsDBNull(13) ? default(string) : dataReader.GetString(13);
                                            instance.<Name>k__BackingField = dataReader.IsDBNull(14) ? default(string) : dataReader.GetString(14);
                                            instance.<OrderId>k__BackingField = dataReader.IsDBNull(15) ? default(string) : dataReader.GetString(15);
                                            instance.<Quantity>k__BackingField = dataReader.IsDBNull(16) ? default(int) : dataReader.GetInt32(16);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: OrderPart | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(OrderPart)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    return entity;
                }, 
                inverseNavigation: [LIFTABLE Constant: Navigation: OrderPart.Order (Order) ToPrincipal Order Inverse: Parts | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.OrderPart").FindNavigation("Order")], 
                fixup: (namelessParameter{9}, namelessParameter{10}) => 
                {
                    [LIFTABLE Constant: ClrICollectionAccessor<Order, List<OrderPart>, OrderPart> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("ServiceCenter.Classes.Order").FindNavigation("Parts").GetCollectionAccessor()].Add(
                        entity: namelessParameter{9}, 
                        value: namelessParameter{10}, 
                        forMaterialization: True);
                    return namelessParameter{10}.<Order>k__BackingField = namelessParameter{9};
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (Order)(resultContext.Values[0]) : default(Order);
        }, 
        contextType: ServiceCenter.DB.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-05-27 15:53:06.435 +03:00 [DBG] Creating DbConnection.
2025-05-27 15:53:06.435 +03:00 [DBG] Created DbConnection. (0ms).
2025-05-27 15:53:06.435 +03:00 [DBG] Opening connection to database 'main' on server 'servicecenter.db'.
2025-05-27 15:53:06.435 +03:00 [DBG] Opened connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 15:53:06.435 +03:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-05-27 15:53:06.435 +03:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-05-27 15:53:06.435 +03:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-05-27 15:53:06.435 +03:00 [DBG] Executing DbCommand [Parameters=[@__response_OrderId_0='?' (Size = 36)], CommandType='"Text"', CommandTimeout='30']
SELECT "o1"."OrderId", "o1"."CustomerName", "o1"."Description", "o1"."DeviceModel", "o1"."DeviceType", "o1"."OrderDate", "o1"."PhoneNumber", "o1"."Price", "o1"."RepairType", "o1"."ResponsibleMaster", "o1"."Status", "o1"."WarehouseRequestStatus", "o0"."Id", "o0"."Model", "o0"."Name", "o0"."OrderId", "o0"."Quantity"
FROM (
    SELECT "o"."OrderId", "o"."CustomerName", "o"."Description", "o"."DeviceModel", "o"."DeviceType", "o"."OrderDate", "o"."PhoneNumber", "o"."Price", "o"."RepairType", "o"."ResponsibleMaster", "o"."Status", "o"."WarehouseRequestStatus"
    FROM "Orders" AS "o"
    WHERE "o"."OrderId" = @__response_OrderId_0
    LIMIT 1
) AS "o1"
LEFT JOIN "OrderParts" AS "o0" ON "o1"."OrderId" = "o0"."OrderId"
ORDER BY "o1"."OrderId"
2025-05-27 15:53:06.435 +03:00 [INF] Executed DbCommand (0ms) [Parameters=[@__response_OrderId_0='?' (Size = 36)], CommandType='"Text"', CommandTimeout='30']
SELECT "o1"."OrderId", "o1"."CustomerName", "o1"."Description", "o1"."DeviceModel", "o1"."DeviceType", "o1"."OrderDate", "o1"."PhoneNumber", "o1"."Price", "o1"."RepairType", "o1"."ResponsibleMaster", "o1"."Status", "o1"."WarehouseRequestStatus", "o0"."Id", "o0"."Model", "o0"."Name", "o0"."OrderId", "o0"."Quantity"
FROM (
    SELECT "o"."OrderId", "o"."CustomerName", "o"."Description", "o"."DeviceModel", "o"."DeviceType", "o"."OrderDate", "o"."PhoneNumber", "o"."Price", "o"."RepairType", "o"."ResponsibleMaster", "o"."Status", "o"."WarehouseRequestStatus"
    FROM "Orders" AS "o"
    WHERE "o"."OrderId" = @__response_OrderId_0
    LIMIT 1
) AS "o1"
LEFT JOIN "OrderParts" AS "o0" ON "o1"."OrderId" = "o0"."OrderId"
ORDER BY "o1"."OrderId"
2025-05-27 15:53:06.437 +03:00 [DBG] Context 'AppDbContext' started tracking 'Order' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 15:53:06.440 +03:00 [DBG] Context 'AppDbContext' started tracking 'OrderPart' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-05-27 15:53:06.440 +03:00 [DBG] Closing data reader to 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 15:53:06.440 +03:00 [DBG] A data reader for 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db' is being disposed after spending 4ms reading results.
2025-05-27 15:53:06.440 +03:00 [DBG] Closing connection to database 'main' on server 'D:\Desktop\ServiceCenter test\OrdersServiceIntegationTests\bin\Debug\net9.0\servicecenter.db'.
2025-05-27 15:53:06.440 +03:00 [DBG] Closed connection to database 'main' on server 'servicecenter.db' (0ms).
2025-05-27 15:53:06.442 +03:00 [DBG] 'AppDbContext' disposed.
2025-05-27 15:53:06.442 +03:00 [DBG] Disposing connection to database 'main' on server 'servicecenter.db'.
2025-05-27 15:53:06.442 +03:00 [DBG] Disposed connection to database 'main' on server 'servicecenter.db' (0ms).
