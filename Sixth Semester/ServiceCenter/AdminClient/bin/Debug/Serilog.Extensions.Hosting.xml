<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Serilog.Extensions.Hosting</name>
    </assembly>
    <members>
        <member name="T:Serilog.Extensions.Hosting.DiagnosticContext">
            <summary>
            Implements an ambient diagnostic context using <see cref="T:System.Threading.AsyncLocal`1"/>.
            </summary>
            <remarks>Consumers should use <see cref="T:Serilog.IDiagnosticContext"/> to set context properties.</remarks>
        </member>
        <member name="M:Serilog.Extensions.Hosting.DiagnosticContext.#ctor(Serilog.ILogger)">
            <summary>
            Construct a <see cref="T:Serilog.Extensions.Hosting.DiagnosticContext"/>.
            </summary>
            <param name="logger">A logger for binding properties in the context, or <c>null</c> to use <see cref="P:Serilog.Log.Logger"/>.</param>
        </member>
        <member name="M:Serilog.Extensions.Hosting.DiagnosticContext.BeginCollection">
            <summary>
            Start collecting properties to associate with the current diagnostic context. This will replace
            the active collector, if any.
            </summary>
            <returns>A collector that will receive properties added in the current diagnostic context.</returns>
        </member>
        <member name="M:Serilog.Extensions.Hosting.DiagnosticContext.Set(System.String,System.Object,System.Boolean)">
            <inheritdoc cref="M:Serilog.IDiagnosticContext.Set(System.String,System.Object,System.Boolean)"/>
        </member>
        <member name="M:Serilog.Extensions.Hosting.DiagnosticContext.SetException(System.Exception)">
            <inheritdoc cref="M:Serilog.IDiagnosticContext.SetException(System.Exception)"/>
        </member>
        <member name="T:Serilog.Extensions.Hosting.DiagnosticContextCollector">
            <summary>
            A container that receives properties added to a diagnostic context.
            </summary>
        </member>
        <member name="M:Serilog.Extensions.Hosting.DiagnosticContextCollector.#ctor(System.IDisposable)">
            <summary>
            Construct a <see cref="T:Serilog.Extensions.Hosting.DiagnosticContextCollector"/>.
            </summary>
            <param name="chainedDisposable">An object that will be disposed to signal completion/disposal of
            the collector.</param>
        </member>
        <member name="M:Serilog.Extensions.Hosting.DiagnosticContextCollector.AddOrUpdate(Serilog.Events.LogEventProperty)">
            <summary>
            Add the property to the context.
            </summary>
            <param name="property">The property to add.</param>
        </member>
        <member name="M:Serilog.Extensions.Hosting.DiagnosticContextCollector.SetException(System.Exception)">
            <summary>
            Set the exception associated with the current diagnostic context.
            </summary>
            <example>
            Passing an exception to the diagnostic context is useful when unhandled exceptions are handled before reaching Serilog's
            RequestLoggingMiddleware. One example is using https://www.nuget.org/packages/Hellang.Middleware.ProblemDetails to transform
            exceptions to ProblemDetails responses.
            </example>
            <remarks>
            If an unhandled exception reaches Serilog's RequestLoggingMiddleware, then the unhandled exception takes precedence.<br/>
            If <c>null</c> is given, it clears any previously assigned exception.
            </remarks>
            <param name="exception">The exception to log.</param>
        </member>
        <member name="M:Serilog.Extensions.Hosting.DiagnosticContextCollector.TryComplete(System.Collections.Generic.IEnumerable{Serilog.Events.LogEventProperty}@)">
            <summary>
            Complete the context and retrieve the properties added to it, if any. This will
            stop collection and remove the collector from the original execution context and
            any of its children.
            </summary>
            <param name="properties">The collected properties, or null if no collection is active.</param>
            <returns>True if properties could be collected.</returns>
            <seealso cref="M:Serilog.IDiagnosticContext.Set(System.String,System.Object,System.Boolean)"/>
        </member>
        <member name="M:Serilog.Extensions.Hosting.DiagnosticContextCollector.TryComplete(System.Collections.Generic.IEnumerable{Serilog.Events.LogEventProperty}@,System.Exception@)">
            <summary>
            Complete the context and retrieve the properties and exception added to it, if any. This will
            stop collection and remove the collector from the original execution context and
            any of its children.
            </summary>
            <param name="properties">The collected properties, or null if no collection is active.</param>
            <param name="exception">The collected exception, or null if none has been collected or if no collection is active.</param>
            <returns>True if properties could be collected.</returns>
            <seealso cref="M:Serilog.IDiagnosticContext.Set(System.String,System.Object,System.Boolean)"/>
            <seealso cref="M:Serilog.IDiagnosticContext.SetException(System.Exception)"/>
        </member>
        <member name="M:Serilog.Extensions.Hosting.DiagnosticContextCollector.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Serilog.Extensions.Hosting.LoggerBase">
            <summary>
            Implements default <see cref="T:Serilog.ILogger"/> methods for caching/reloadable loggers.
            </summary>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Write(Serilog.Events.LogEvent)">
            <summary>
            Write an event to the log.
            </summary>
            <param name="logEvent">The event to write.</param>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Write(Serilog.Events.LogEventLevel,System.String)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Write``1(Serilog.Events.LogEventLevel,System.String,``0)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Write``2(Serilog.Events.LogEventLevel,System.String,``0,``1)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Write``3(Serilog.Events.LogEventLevel,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Write(Serilog.Events.LogEventLevel,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Write(Serilog.Events.LogEventLevel,System.Exception,System.String)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Write``1(Serilog.Events.LogEventLevel,System.Exception,System.String,``0)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Write``2(Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Write``3(Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Write(Serilog.Events.LogEventLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Verbose(System.String)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example><code>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Verbose``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Verbose``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Verbose``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Verbose(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example><code>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Verbose(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example><code>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Verbose``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Verbose``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Verbose``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Verbose(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example><code>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Debug(System.String)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example><code>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Debug``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Debug``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Debug``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Debug(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example><code>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Debug(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example><code>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Debug``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Debug``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Debug``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example><code>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Information(System.String)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example><code>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Information``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Information``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Information``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Information(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example><code>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Information(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example><code>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Information``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Information``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Information``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Information(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example><code>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Warning(System.String)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example><code>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Warning``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Warning``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Warning``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Warning(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example><code>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Warning(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example><code>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Warning``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Warning``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Warning``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Warning(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example><code>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Error(System.String)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example><code>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Error``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Error``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Error``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Error(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example><code>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Error(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example><code>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Error``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Error``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Error``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example><code>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Fatal(System.String)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example><code>
            Log.Fatal("Process terminating.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Fatal``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Fatal("Process terminating.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Fatal``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Fatal("Process terminating.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Fatal``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Fatal("Process terminating.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Fatal(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example><code>
            Log.Fatal("Process terminating.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Fatal(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example><code>
            Log.Fatal(ex, "Process terminating.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Fatal``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Fatal(ex, "Process terminating.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Fatal``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Fatal(ex, "Process terminating.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Fatal``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example><code>
            Log.Fatal(ex, "Process terminating.");
            </code></example>
        </member>
        <member name="M:Serilog.Extensions.Hosting.LoggerBase.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example><code>
            Log.Fatal(ex, "Process terminating.");
            </code></example>
        </member>
        <member name="T:Serilog.Extensions.Hosting.ReloadableLogger">
            <summary>
            A Serilog <see cref="T:Serilog.ILogger"/> that can be reconfigured without invalidating existing <see cref="T:Serilog.ILogger"/>
            instances derived from it.
            </summary>
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.Reload(System.Func{Serilog.LoggerConfiguration,Serilog.LoggerConfiguration})">
            <summary>
            Reload the logger using the supplied configuration delegate.
            </summary>
            <param name="configure">A callback in which the logger is reconfigured.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="configure"/> is null.</exception>
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.Freeze">
            <summary>
            Freeze the logger, so that no further reconfiguration is possible. Once the logger is frozen, logging through
            new contextual loggers will have no additional cost, and logging directly through this logger will not require
            any synchronization.
            </summary>
            <returns>The <see cref="T:Serilog.Core.Logger"/> configured with the final settings.</returns>
            <exception cref="T:System.InvalidOperationException">The logger is already frozen.</exception>
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.ForContext(Serilog.Core.ILogEventEnricher)">
            <inheritdoc />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.ForContext(System.Collections.Generic.IEnumerable{Serilog.Core.ILogEventEnricher})">
            <inheritdoc />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.ForContext(System.String,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.ForContext``1">
            <inheritdoc />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.ForContext(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.Write(Serilog.Events.LogEvent)">
            <inheritdoc cref="M:Serilog.ILogger.Write(Serilog.Events.LogEvent)" />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.Write(Serilog.Events.LogEventLevel,System.String)">
            <inheritdoc cref="M:Serilog.ILogger.Write(Serilog.Events.LogEventLevel,System.String)" />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.Write``1(Serilog.Events.LogEventLevel,System.String,``0)">
            <inheritdoc cref="M:Serilog.ILogger.Write``1(Serilog.Events.LogEventLevel,System.String,``0)" />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.Write``2(Serilog.Events.LogEventLevel,System.String,``0,``1)">
            <inheritdoc cref="M:Serilog.ILogger.Write``2(Serilog.Events.LogEventLevel,System.String,``0,``1)" />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.Write``3(Serilog.Events.LogEventLevel,System.String,``0,``1,``2)">
            <inheritdoc cref="M:Serilog.ILogger.Write``3(Serilog.Events.LogEventLevel,System.String,``0,``1,``2)" />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.Write(Serilog.Events.LogEventLevel,System.String,System.Object[])">
            <inheritdoc cref="M:Serilog.ILogger.Write(Serilog.Events.LogEventLevel,System.String,System.Object[])" />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.Write(Serilog.Events.LogEventLevel,System.Exception,System.String)">
            <inheritdoc cref="M:Serilog.ILogger.Write(Serilog.Events.LogEventLevel,System.Exception,System.String)" />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.Write``1(Serilog.Events.LogEventLevel,System.Exception,System.String,``0)">
            <inheritdoc cref="M:Serilog.ILogger.Write``1(Serilog.Events.LogEventLevel,System.Exception,System.String,``0)" />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.Write``2(Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1)">
            <inheritdoc cref="M:Serilog.ILogger.Write``2(Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1)" />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.Write``3(Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1,``2)">
            <inheritdoc cref="M:Serilog.ILogger.Write``3(Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1,``2)" />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.Write(Serilog.Events.LogEventLevel,System.Exception,System.String,System.Object[])">
            <inheritdoc cref="M:Serilog.ILogger.Write(Serilog.Events.LogEventLevel,System.Exception,System.String,System.Object[])" />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.IsEnabled(Serilog.Events.LogEventLevel)">
            <inheritdoc />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.BindMessageTemplate(System.String,System.Object[],Serilog.Events.MessageTemplate@,System.Collections.Generic.IEnumerable{Serilog.Events.LogEventProperty}@)">
            <inheritdoc />
        </member>
        <member name="M:Serilog.Extensions.Hosting.ReloadableLogger.BindProperty(System.String,System.Object,System.Boolean,Serilog.Events.LogEventProperty@)">
            <inheritdoc />
        </member>
        <member name="T:Serilog.IDiagnosticContext">
            <summary>
            Collects diagnostic information for packaging into wide events.
            </summary>
        </member>
        <member name="M:Serilog.IDiagnosticContext.Set(System.String,System.Object,System.Boolean)">
            <summary>
            Set the specified property on the current diagnostic context. The property will be collected
            and attached to the event emitted at the completion of the context.
            </summary>
            <param name="propertyName">The name of the property. Must be non-empty.</param>
            <param name="value">The property value.</param>
            <param name="destructureObjects">If true, the value will be serialized as structured
            data if possible; if false, the object will be recorded as a scalar or simple array.</param>
        </member>
        <member name="M:Serilog.IDiagnosticContext.SetException(System.Exception)">
            <summary>
            Set the specified exception on the current diagnostic context.
            </summary>
            <remarks>
            This method is useful when unhandled exceptions do not reach <c>Serilog.AspNetCore.RequestLoggingMiddleware</c>,
            such as when using <a href="https://www.nuget.org/packages/Hellang.Middleware.ProblemDetails">Hellang.Middleware.ProblemDetails</a>
            to transform exceptions to ProblemDetails responses.
            </remarks>
            <param name="exception">The exception to log. If <c>null</c> is given, it clears any previously assigned exception.</param>
        </member>
        <member name="T:Serilog.LoggerConfigurationExtensions">
            <summary>
            Extends <see cref="T:Serilog.LoggerConfiguration"/>.
            </summary>
        </member>
        <member name="M:Serilog.LoggerConfigurationExtensions.CreateBootstrapLogger(Serilog.LoggerConfiguration)">
            <summary>
            Create a <see cref="T:Serilog.Extensions.Hosting.ReloadableLogger"/> for use during host bootstrapping. The
            <see cref="M:Serilog.SerilogHostBuilderExtensions.UseSerilog(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,System.IServiceProvider,Serilog.LoggerConfiguration},System.Boolean,System.Boolean)"/>
            configuration overload will detect when <see cref="P:Serilog.Log.Logger"/> is set to a <see cref="T:Serilog.Extensions.Hosting.ReloadableLogger"/> instance, and
            reconfigure/freeze it so that <see cref="T:Serilog.ILogger"/>s created during host bootstrapping continue to work once
            logger configuration (with access to host services) is completed.
            </summary>
            <param name="loggerConfiguration"></param>
            <returns></returns>
        </member>
        <member name="T:Serilog.LoggerSettingsConfigurationExtensions">
            <summary>
            Extends <see cref="T:Serilog.Configuration.LoggerSettingsConfiguration"/> with methods for consuming host services.
            </summary>
        </member>
        <member name="M:Serilog.LoggerSettingsConfigurationExtensions.Services(Serilog.Configuration.LoggerSettingsConfiguration,System.IServiceProvider)">
            <summary>
            Configure the logger using components from the <paramref name="services"/>. If present, the logger will
            receive implementations/instances of <see cref="T:Serilog.Core.LoggingLevelSwitch"/>, <see cref="T:Serilog.Core.IDestructuringPolicy"/>,
            <see cref="T:Serilog.Core.ILogEventFilter"/>, <see cref="T:Serilog.Core.ILogEventEnricher"/>, <see cref="T:Serilog.Core.ILogEventSink"/>, and
            <see cref="T:Serilog.Configuration.ILoggerSettings"/>.
            </summary>
            <param name="loggerSettingsConfiguration">The `ReadFrom` configuration object.</param>
            <param name="services">A <see cref="T:System.IServiceProvider"/> from which services will be requested.</param>
            <returns>A <see cref="T:Serilog.LoggerConfiguration"/> to support method chaining.</returns>
        </member>
        <member name="T:Serilog.SerilogHostBuilderExtensions">
            <summary>
            Extends <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/> with Serilog configuration methods.
            </summary>
        </member>
        <member name="M:Serilog.SerilogHostBuilderExtensions.UseSerilog(Microsoft.Extensions.Hosting.IHostBuilder,Serilog.ILogger,System.Boolean,Serilog.Extensions.Logging.LoggerProviderCollection)">
            <summary>
            Sets Serilog as the logging provider.
            </summary>
            <param name="builder">The host builder to configure.</param>
            <param name="logger">The Serilog logger; if not supplied, the static <see cref="T:Serilog.Log"/> will be used.</param>
            <param name="dispose">When <c>true</c>, dispose <paramref name="logger"/> when the framework disposes the provider. If the
            logger is not specified but <paramref name="dispose"/> is <c>true</c>, the <see cref="M:Serilog.Log.CloseAndFlush"/> method will be
            called on the static <see cref="T:Serilog.Log"/> class instead.</param>
            <param name="providers">A <see cref="T:Serilog.Extensions.Logging.LoggerProviderCollection"/> registered in the Serilog pipeline using the
            <c>WriteTo.Providers()</c> configuration method, enabling other <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider"/>s to receive events. By
            default, only Serilog sinks will receive events.</param>
            <returns>The host builder.</returns>
        </member>
        <member name="M:Serilog.SerilogHostBuilderExtensions.UseSerilog(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Serilog.LoggerConfiguration},System.Boolean,System.Boolean)">
            <summary>Sets Serilog as the logging provider.</summary>
            <remarks>
            A <see cref="T:Microsoft.Extensions.Hosting.HostBuilderContext"/> is supplied so that configuration and hosting information can be used.
            The logger will be shut down when application services are disposed.
            </remarks>
            <param name="builder">The host builder to configure.</param>
            <param name="configureLogger">The delegate for configuring the <see cref="T:Serilog.LoggerConfiguration" /> that will be used to construct a <see cref="T:Serilog.Core.Logger" />.</param>
            <param name="preserveStaticLogger">Indicates whether to preserve the value of <see cref="P:Serilog.Log.Logger"/>.</param>
            <param name="writeToProviders">By default, Serilog does not write events to <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider"/>s registered through
            the Microsoft.Extensions.Logging API. Normally, equivalent Serilog sinks are used in place of providers. Specify
            <c>true</c> to write events to all providers.</param>
            <returns>The host builder.</returns>
        </member>
        <member name="M:Serilog.SerilogHostBuilderExtensions.UseSerilog(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,System.IServiceProvider,Serilog.LoggerConfiguration},System.Boolean,System.Boolean)">
            <summary>Sets Serilog as the logging provider.</summary>
            <remarks>
            A <see cref="T:Microsoft.Extensions.Hosting.HostBuilderContext"/> is supplied so that configuration and hosting information can be used.
            The logger will be shut down when application services are disposed.
            </remarks>
            <param name="builder">The host builder to configure.</param>
            <param name="configureLogger">The delegate for configuring the <see cref="T:Serilog.LoggerConfiguration" /> that will be used to construct a <see cref="T:Serilog.Core.Logger" />.</param>
            <param name="preserveStaticLogger">Indicates whether to preserve the value of <see cref="P:Serilog.Log.Logger"/>.</param>
            <param name="writeToProviders">By default, Serilog does not write events to <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider"/>s registered through
            the Microsoft.Extensions.Logging API. Normally, equivalent Serilog sinks are used in place of providers. Specify
            <c>true</c> to write events to all providers.</param>
            <remarks>If the static <see cref="P:Serilog.Log.Logger"/> is a bootstrap logger (see
            <c>LoggerConfigurationExtensions.CreateBootstrapLogger()</c>), and <paramref name="preserveStaticLogger"/> is
            not specified, the the bootstrap logger will be reconfigured through the supplied delegate, rather than being
            replaced entirely or ignored.</remarks>
            <returns>The host builder.</returns>
        </member>
        <member name="T:Serilog.SerilogServiceCollectionExtensions">
            <summary>
            Extends <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> with Serilog configuration methods.
            </summary>
        </member>
        <member name="M:Serilog.SerilogServiceCollectionExtensions.AddSerilog(Microsoft.Extensions.DependencyInjection.IServiceCollection,Serilog.ILogger,System.Boolean,Serilog.Extensions.Logging.LoggerProviderCollection)">
            <summary>
            Sets Serilog as the logging provider.
            </summary>
            <param name="collection">The service collection to use.</param>
            <param name="logger">The Serilog logger; if not supplied, the static <see cref="T:Serilog.Log"/> will be used.</param>
            <param name="dispose">When <c>true</c>, dispose <paramref name="logger"/> when the framework disposes the provider. If the
            logger is not specified but <paramref name="dispose"/> is <c>true</c>, the <see cref="M:Serilog.Log.CloseAndFlush"/> method will be
            called on the static <see cref="T:Serilog.Log"/> class instead.</param>
            <param name="providers">A <see cref="T:Serilog.Extensions.Logging.LoggerProviderCollection"/> registered in the Serilog pipeline using the
            <c>WriteTo.Providers()</c> configuration method, enabling other <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider"/>s to receive events. By
            default, only Serilog sinks will receive events.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Serilog.SerilogServiceCollectionExtensions.AddSerilog(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Serilog.LoggerConfiguration},System.Boolean,System.Boolean)">
            <summary>Sets Serilog as the logging provider.</summary>
            <param name="collection">The service collection to use.</param>
            <param name="configureLogger">The delegate for configuring the <see cref="T:Serilog.LoggerConfiguration" /> that will be used to construct a <see cref="T:Serilog.Core.Logger" />.</param>
            <param name="preserveStaticLogger">Indicates whether to preserve the value of <see cref="P:Serilog.Log.Logger"/>.</param>
            <param name="writeToProviders">By default, Serilog does not write events to <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider"/>s registered through
            the Microsoft.Extensions.Logging API. Normally, equivalent Serilog sinks are used in place of providers. Specify
            <c>true</c> to write events to all providers.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Serilog.SerilogServiceCollectionExtensions.AddSerilog(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Serilog.LoggerConfiguration},System.Boolean,System.Boolean)">
            <summary>Sets Serilog as the logging provider.</summary>
            <param name="collection">The service collection to use.</param>
            <param name="configureLogger">The delegate for configuring the <see cref="T:Serilog.LoggerConfiguration" /> that will be used to construct a <see cref="T:Serilog.Core.Logger" />.</param>
            <param name="preserveStaticLogger">Indicates whether to preserve the value of <see cref="P:Serilog.Log.Logger"/>.</param>
            <param name="writeToProviders">By default, Serilog does not write events to <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider"/>s registered through
            the Microsoft.Extensions.Logging API. Normally, equivalent Serilog sinks are used in place of providers. Specify
            <c>true</c> to write events to all providers.</param>
            <remarks>If the static <see cref="P:Serilog.Log.Logger"/> is a bootstrap logger (see
            <c>LoggerConfigurationExtensions.CreateBootstrapLogger()</c>), and <paramref name="preserveStaticLogger"/> is
            not specified, the the bootstrap logger will be reconfigured through the supplied delegate, rather than being
            replaced entirely or ignored.</remarks>
            <returns>The service collection.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
